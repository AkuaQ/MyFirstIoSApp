/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmUITests/DetailsUITests.swift:
    1|       |//
    2|       |//  DetailsUITests.swift
    3|       |//  BookWyrmUITests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/19.
    6|       |//  Copyright Â© 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |
   11|       |class DetailsUITests: XCTestCase {
   12|       |    let app = XCUIApplication()
   13|       |
   14|      9|    override func setUp() {
   15|      9|        continueAfterFailure = false
   16|      9|        app.launchArguments.append("Testing")
   17|      9|    }
   18|       |
   19|      9|    override func tearDown() {
   20|      9|
   21|      9|    }
   22|       |   
   23|      1|    func testReadBookHasFilledBookmarkAndKnownBookHasReviews() {
   24|      1|        app.launch()
   25|      1|        openChamberOfSecrets()
   26|      1|        let expect = XCTestExpectation(description: "Pages: 341")
   27|      1|        _ = XCTWaiter.wait(for: [expect], timeout: 11)
   28|      1|
   29|      1|        XCTAssert(app.staticTexts["Pages: 341"].exists)
   30|      1|        XCTAssert(app.staticTexts["Guardian"].exists)
   31|      1|        XCTAssert(app.buttons["bookmarkFilled2"].exists)
   32|      1|    }
   33|       |    
   34|      1|    func testUnreadBookDoestHaveBookmarkAndUnknownBookHasNoReviews() {
   35|      1|        app.launch()
   36|      1|        openReadingHarryPotter()
   37|      1|        sleep(3)
   38|      1|        //XCTAssert(!app.buttons["reviews"].exists)
   39|      1|        XCTAssert(app.buttons["bookmark2"].exists)
   40|      1|    }
   41|       |    
   42|      1|    func testAddingBookToShelfModifiesButton() {
   43|      1|        app.launch()
   44|      1|        openReadingHarryPotter()
   45|      1|        let bookmarkButton = app.buttons["bookmark2"]
   46|      1|        bookmarkButton.tap()
   47|      1|        sleep(3)
   48|      1|        XCTAssert(app.buttons["bookmarkFilled2"].exists)
   49|      1|    }
   50|       |    
   51|      1|    func testRemovingBookFromShelfModifiesButton() {
   52|      1|        app.launch()
   53|      1|        openChamberOfSecrets()
   54|      1|        let bookmarkButton = app.buttons["bookmarkFilled2"]
   55|      1|        bookmarkButton.tap()
   56|      1|        sleep(1)
   57|      1|        XCTAssert(app.buttons["bookmark2"].exists)
   58|      1|    }
   59|       |    
   60|      1|    func testClickingReadingLinkOpensWebview() {
   61|      1|        app.launch()
   62|      1|        openChamberOfSecrets()
   63|      1|        let button = app.buttons["Book Link"]
   64|      1|        button.tap()
   65|      1|        let expect = XCTestExpectation(description: "Harry Potter and the Chamber of Secrets")
   66|      1|        _ = XCTWaiter.wait(for: [expect], timeout: 10)
   67|      1|        XCTAssert(app.staticTexts["Harry Potter and the Chamber of Secrets"].exists)
   68|      1|    }
   69|       |    
   70|      1|    func testOpeningMyReviewPage() {
   71|      1|        app.launch()
   72|      1|        openChamberOfSecrets()
   73|      1|        sleep(3)
   74|      1|        let reviewsButton = app.buttons["Leave a Review"]
   75|      1|        reviewsButton.tap()
   76|      1|        let expect = XCTestExpectation(description: "Review for: Harry Potter and the Chamber of Secrets")
   77|      1|         _ = XCTWaiter.wait(for: [expect], timeout: 12)
   78|      1|        XCTAssert(app.navigationBars["Review for: Harry Potter and the Chamber of Secrets"].exists)
   79|      1|    }
   80|       |    
   81|      1|    func testOpeningCriticReviewPage() {
   82|      1|        app.launch()
   83|      1|        openChamberOfSecrets()
   84|      1|        let reviewsButton = app.buttons["SEE ALL"]
   85|      1|        reviewsButton.tap()
   86|      1|        sleep(3)
   87|      1|        XCTAssert(app.navigationBars["Reviews for: Harry Potter and the Chamber of Secrets"].exists)
   88|      1|    }
   89|       |    
   90|      1|    func testErrorPopup() {
   91|      1|        app.launchArguments.append("Error")
   92|      1|        app.launch()
   93|      1|        openChamberOfSecrets()
   94|      1|        sleep(2)
   95|      1|        XCTAssertEqual(app.alerts.element.label, "Network Error")
   96|      1|    }
   97|       |    
   98|      1|    func testOpeningSimilarBooks() {
   99|      1|        app.launch()
  100|      1|        openChamberOfSecrets()
  101|      1|        let scrollViewsQuery = app.scrollViews
  102|      1|        scrollViewsQuery.otherElements.containing(.staticText, identifier: "Harry Potter and the Chamber of Secrets").element.swipeUp()
  103|      1|        let elementsQuery = scrollViewsQuery.otherElements.containing(.staticText, identifier: "Harry Potter and the Chamber of Secrets")
  104|      1|        elementsQuery.children(matching: .image).element(boundBy: 2).tap()
  105|      1|        sleep(1)
  106|      1|        XCTAssert(app.staticTexts["Lord of the Flies"].exists)
  107|      1|        app.navigationBars["BookWyrm.NewDetailView"].buttons["Back"].tap()
  108|      1|        elementsQuery.children(matching: .image).element(boundBy: 3).tap()
  109|      1|        sleep(1)
  110|      1|        XCTAssert(app.staticTexts["A Wrinkle in Time (Time Quintet, #1)"].exists)
  111|      1|        app.navigationBars["BookWyrm.NewDetailView"].buttons["Back"].tap()
  112|      1|        elementsQuery.children(matching: .image).element(boundBy: 4).tap()
  113|      1|        sleep(1)
  114|      1|        XCTAssert(app.staticTexts["Speak"].exists)
  115|      1|        app.navigationBars["BookWyrm.NewDetailView"].buttons["Back"].tap()
  116|      1|        elementsQuery.children(matching: .image).element(boundBy: 5).tap()
  117|      1|        sleep(1)
  118|      1|        XCTAssert(app.staticTexts["By: Lewis Carroll"].exists)
  119|      1|    }
  120|       |    
  121|      2|    func openReadingHarryPotter() {
  122|      2|        let sorryNoBooksFoundTable = app.tables[" Sorry, No books found "]
  123|      2|        sorryNoBooksFoundTable.searchFields["Search for a Book"].tap()
  124|      2|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  125|      2|        hKey.tap()
  126|      2|        let aKey = app/*@START_MENU_TOKEN@*/.keys["a"]/*[[".keyboards.keys[\"a\"]",".keys[\"a\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  127|      2|        aKey.tap()
  128|      2|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  129|      2|        rKey.tap()
  130|      2|        rKey.tap()
  131|      2|        let yKey = app/*@START_MENU_TOKEN@*/.keys["y"]/*[[".keyboards.keys[\"y\"]",".keys[\"y\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  132|      2|        yKey.tap()
  133|      2|        let spaceKey = app.keys["space"]
  134|      2|        spaceKey.tap()
  135|      2|        app/*@START_MENU_TOKEN@*/.buttons["shift"]/*[[".keyboards.buttons[\"shift\"]",".buttons[\"shift\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
  136|      2|        let pKey = app/*@START_MENU_TOKEN@*/.keys["P"]/*[[".keyboards.keys[\"P\"]",".keys[\"P\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  137|      2|        sleep(1)
  138|      2|        pKey.tap()
  139|      2|        sorryNoBooksFoundTable.staticTexts["Reading Harry Potter"].tap()
  140|      2|    }
  141|       |    
  142|      7|    func openChamberOfSecrets() {
  143|      7|        let sorryNoBooksFoundTable = app.tables[" Sorry, No books found "]
  144|      7|        sorryNoBooksFoundTable.searchFields["Search for a Book"].tap()
  145|      7|        
  146|      7|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  147|      7|        hKey.tap()
  148|      7|        let aKey = app/*@START_MENU_TOKEN@*/.keys["a"]/*[[".keyboards.keys[\"a\"]",".keys[\"a\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  149|      7|        aKey.tap()
  150|      7|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  151|      7|        rKey.tap()
  152|      7|        rKey.tap()
  153|      7|        let yKey = app/*@START_MENU_TOKEN@*/.keys["y"]/*[[".keyboards.keys[\"y\"]",".keys[\"y\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  154|      7|        yKey.tap()
  155|      7|        let spaceKey = app.keys["space"]
  156|      7|        spaceKey.tap()
  157|      7|        app/*@START_MENU_TOKEN@*/.buttons["shift"]/*[[".keyboards.buttons[\"shift\"]",".buttons[\"shift\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
  158|      7|        let pKey = app/*@START_MENU_TOKEN@*/.keys["P"]/*[[".keyboards.keys[\"P\"]",".keys[\"P\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  159|      7|        pKey.tap()
  160|      7|        let oKey = app/*@START_MENU_TOKEN@*/.keys["o"]/*[[".keyboards.keys[\"o\"]",".keys[\"o\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  161|      7|        oKey.tap()
  162|      7|        let tKey = app/*@START_MENU_TOKEN@*/.keys["t"]/*[[".keyboards.keys[\"t\"]",".keys[\"t\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  163|      7|        tKey.tap()
  164|      7|        tKey.tap()
  165|      7|        let eKey = app/*@START_MENU_TOKEN@*/.keys["e"]/*[[".keyboards.keys[\"e\"]",".keys[\"e\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  166|      7|        eKey.tap()
  167|      7|        rKey.tap()
  168|      7|        spaceKey.tap()
  169|      7|        
  170|      7|        aKey.tap()
  171|      7|        let nKey = app/*@START_MENU_TOKEN@*/.keys["n"]/*[[".keyboards.keys[\"n\"]",".keys[\"n\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  172|      7|        nKey.tap()
  173|      7|        let dKey = app/*@START_MENU_TOKEN@*/.keys["d"]/*[[".keyboards.keys[\"d\"]",".keys[\"d\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  174|      7|        dKey.tap()
  175|      7|        spaceKey.tap()
  176|      7|        tKey.tap()
  177|      7|        let hKey2 = app/*@START_MENU_TOKEN@*/.keys["h"]/*[[".keyboards.keys[\"h\"]",".keys[\"h\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  178|      7|        hKey2.tap()
  179|      7|        eKey.tap()
  180|      7|        spaceKey.tap()
  181|      7|        
  182|      7|        let cKey = app/*@START_MENU_TOKEN@*/.keys["c"]/*[[".keyboards.keys[\"c\"]",".keys[\"c\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  183|      7|        cKey.tap()
  184|      7|        hKey2.tap()
  185|      7|        aKey.tap()
  186|      7|        let mKey = app/*@START_MENU_TOKEN@*/.keys["m"]/*[[".keyboards.keys[\"m\"]",".keys[\"m\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  187|      7|        mKey.tap()
  188|      7|        let bKey = app/*@START_MENU_TOKEN@*/.keys["b"]/*[[".keyboards.keys[\"b\"]",".keys[\"b\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  189|      7|        bKey.tap()
  190|      7|        eKey.tap()
  191|      7|        sleep(1)
  192|      7|        rKey.tap()
  193|      7|        
  194|      7|        let firstItem = app.cells.element(boundBy: 0)
  195|      7|        firstItem.tap()
  196|      7|    }
  197|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmUITests/SearchUITests.swift:
    1|       |//
    2|       |//  SearchUITests.swift
    3|       |//  BookWyrmUITests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/14.
    6|       |//  Copyright Â© 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |
   11|       |class SearchUITests: XCTestCase {
   12|       |    let app = XCUIApplication()
   13|       |    
   14|      5|    override func setUp() {
   15|      5|        continueAfterFailure = false
   16|      5|        // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.
   17|      5|        app.launchArguments.append("Testing")
   18|      5|        app.launch()
   19|      5|        // In UI tests itâs important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
   20|      5|    }
   21|       |
   22|      5|    override func tearDown() {
   23|      5|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   24|      5|    }
   25|       |    
   26|      1|    func testTypingTextDynamicallySearches() {
   27|      1|        app.tables[" Sorry, No books found "].searchFields["Search for a Book"].tap()
   28|      1|        
   29|      1|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   30|      1|        hKey.tap()
   31|      1|        let aKey = app/*@START_MENU_TOKEN@*/.keys["a"]/*[[".keyboards.keys[\"a\"]",".keys[\"a\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   32|      1|        aKey.tap()
   33|      1|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   34|      1|        rKey.tap()
   35|      1|        rKey.tap()
   36|      1|        let yKey = app/*@START_MENU_TOKEN@*/.keys["y"]/*[[".keyboards.keys[\"y\"]",".keys[\"y\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   37|      1|        yKey.tap()
   38|      1|        let spaceKey = app.keys["space"]
   39|      1|        spaceKey.tap()
   40|      1|        app/*@START_MENU_TOKEN@*/.buttons["shift"]/*[[".keyboards.buttons[\"shift\"]",".buttons[\"shift\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
   41|      1|        let pKey = app/*@START_MENU_TOKEN@*/.keys["P"]/*[[".keyboards.keys[\"P\"]",".keys[\"P\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   42|      1|        sleep(1)
   43|      1|        pKey.tap()
   44|      1|        sleep(1) //XCTWait
   45|      1|        
   46|      1|        XCTAssert(app.staticTexts["Reading Harry Potter"].exists)
   47|      1|    }
   48|       |    
   49|      1|    func testCancellingSearchEmptiesResults() {
   50|      1|        app.tables[" Sorry, No books found "].searchFields["Search for a Book"].tap()
   51|      1|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   52|      1|        hKey.tap()
   53|      1|        let aKey = app/*@START_MENU_TOKEN@*/.keys["a"]/*[[".keyboards.keys[\"a\"]",".keys[\"a\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   54|      1|        aKey.tap()
   55|      1|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   56|      1|        rKey.tap()
   57|      1|        app.buttons["Cancel"].tap()
   58|      1|        
   59|      1|        XCTAssert(app.staticTexts[" Sorry, No books found "].exists)
   60|      1|    }
   61|       |    
   62|      1|    func testDeletingContentInSearchBarEmptiesResults() {
   63|      1|        app.tables[" Sorry, No books found "].searchFields["Search for a Book"].tap()
   64|      1|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   65|      1|        hKey.tap()
   66|      1|        sleep(1)
   67|      1|        let deleteKey = app/*@START_MENU_TOKEN@*/.keys["delete"]/*[[".keyboards.keys[\"delete\"]",".keys[\"delete\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   68|      1|        deleteKey.tap()
   69|      1|        
   70|      1|        XCTAssert(app.staticTexts[" Sorry, No books found "].exists)
   71|      1|    }
   72|       |    
   73|      1|    func testErrorFromNetworkShowsAlert() {
   74|      1|        app.tables[" Sorry, No books found "].searchFields["Search for a Book"].tap()
   75|      1|        let eKey = app.keys["E"]
   76|      1|        eKey.tap()
   77|      1|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   78|      1|        rKey.tap()
   79|      1|        rKey.tap()
   80|      1|        let oKey = app.keys["o"]
   81|      1|        oKey.tap()
   82|      1|        sleep(1)
   83|      1|        rKey.tap()
   84|      1|        sleep(1)
   85|      1|        XCTAssertEqual(app.alerts.element.label, "Network Error")
   86|      1|    }
   87|       |    
   88|      1|    func testSelectingASearchResultOpensDetailsPage() {
   89|      1|        let sorryNoBooksFoundTable = app.tables[" Sorry, No books found "]
   90|      1|        sorryNoBooksFoundTable.searchFields["Search for a Book"].tap()
   91|      1|        
   92|      1|        let hKey = app/*@START_MENU_TOKEN@*/.keys["H"]/*[[".keyboards.keys[\"H\"]",".keys[\"H\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   93|      1|        hKey.tap()
   94|      1|        let aKey = app/*@START_MENU_TOKEN@*/.keys["a"]/*[[".keyboards.keys[\"a\"]",".keys[\"a\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   95|      1|        aKey.tap()
   96|      1|        let rKey = app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
   97|      1|        rKey.tap()
   98|      1|        rKey.tap()
   99|      1|        let yKey = app/*@START_MENU_TOKEN@*/.keys["y"]/*[[".keyboards.keys[\"y\"]",".keys[\"y\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  100|      1|        yKey.tap()
  101|      1|        let spaceKey = app.keys["space"]
  102|      1|        spaceKey.tap()
  103|      1|        app/*@START_MENU_TOKEN@*/.buttons["shift"]/*[[".keyboards.buttons[\"shift\"]",".buttons[\"shift\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
  104|      1|        let pKey = app/*@START_MENU_TOKEN@*/.keys["P"]/*[[".keyboards.keys[\"P\"]",".keys[\"P\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/
  105|      1|        sleep(1)
  106|      1|        pKey.tap()
  107|      1|        sorryNoBooksFoundTable.staticTexts["Reading Harry Potter"].tap()
  108|      1|        sleep(1)
  109|      1|        
  110|      1|        XCTAssert(app.staticTexts["Pages: 217"].exists)
  111|      1|    }
  112|       |}

