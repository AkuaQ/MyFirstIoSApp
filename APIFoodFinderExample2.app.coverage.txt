/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/APITableViewController.swift:
    1|       |//
    2|       |//  APITableViewController.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class APITableViewController: UITableViewController {
   12|       |   
   13|       |    @IBOutlet weak var recipeSearchBar: UISearchBar!
   14|       |    
   15|       |    var foodList = [FoodDetails](){
   16|      0|    didSet {
   17|      0|               DispatchQueue.main.async {
   18|      0|                   self.tableView.reloadData()
   19|      0|                   //TODO: self.navigationItem.title = "\(self.foodList.count) Holidays found"
   20|      0|               }
   21|      0|           }
   22|       |       }
   23|       |    
   24|       |
   25|      1|    override func viewDidLoad() {
   26|      1|        super.viewDidLoad()
   27|      1|        recipeSearchBar.delegate = self
   28|      1|        
   29|      1|       self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: "Cell")
   30|      1|    }
   31|       |
   32|       |// MARK: - Table view data source
   33|       |
   34|      3|override func numberOfSections(in tableView: UITableView) -> Int {
   35|      3|    // #warning Incomplete implementation, return the number of sections
   36|      3|
   37|      3|    return 1
   38|      3|}
   39|       |
   40|      3|override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
   41|      3|    // #warning Incomplete implementation, return the number of rows
   42|      3|    return foodList.count
   43|      3|}
   44|       |
   45|      0| override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   46|      0|    let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
   47|      0|    
   48|      0|    cell.textLabel?.text = foodList[indexPath.row].title
   49|      0|    cell.detailTextLabel?.text = foodList[indexPath.row].ingredients
   50|      0|    print(foodList[indexPath.row].title)
   51|      0|   return cell
   52|      0| }
   53|       | 
   54|       |
   55|       |/*
   56|       | // Override to support conditional editing of the table view.
   57|       | override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
   58|       | // Return false if you do not want the specified item to be editable.
   59|       | return true
   60|       | }
   61|       | */
   62|       |
   63|       |/*
   64|       | // Override to support editing the table view.
   65|       | override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
   66|       | if editingStyle == .delete {
   67|       | // Delete the row from the data source
   68|       | tableView.deleteRows(at: [indexPath], with: .fade)
   69|       | } else if editingStyle == .insert {
   70|       | // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
   71|       | }
   72|       | }
   73|       | */
   74|       |
   75|       |/*
   76|       | // Override to support rearranging the table view.
   77|       | override func tableView(_ tableView: UITableView, moveRowAt fromIndexPath: IndexPath, to: IndexPath) {
   78|       | 
   79|       | }
   80|       | */
   81|       |
   82|       |/*
   83|       | // Override to support conditional rearranging of the table view.
   84|       | override func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
   85|       | // Return false if you do not want the item to be re-orderable.
   86|       | return true
   87|       | }
   88|       | */
   89|       |
   90|       |}
   91|       |
   92|       |extension APITableViewController : UISearchBarDelegate {
   93|       |    
   94|      0|    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
   95|      0|        guard let searchBarText = recipeSearchBar.text else {return}
   96|      0|        let foodRequest = FoodRequest(countryCode: searchBarText)
   97|      0|        foodRequest.getSearchResult { [weak self] result in
   98|      0|            switch result {
   99|      0|            case .failure(let error):
  100|      0|                print(error)
  101|      0|            case .success(let food):
  102|      0|                self?.foodList = food
  103|      0|            }
  104|      0|            
  105|      0|        }
  106|      0|    }
  107|       |}
  108|       |
  109|       |

/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/AppDelegate.swift:
    1|       |//
    2|       |//  AppDelegate.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |@UIApplicationMain
   12|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   13|       |
   14|       |
   15|       |
   16|      1|    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
   17|      1|        // Override point for customization after application launch.
   18|      1|        return true
   19|      1|    }
   20|       |
   21|       |    // MARK: UISceneSession Lifecycle
   22|       |
   23|      0|    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
   24|      0|        // Called when a new scene session is being created.
   25|      0|        // Use this method to select a configuration to create the new scene with.
   26|      0|        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
   27|      0|    }
   28|       |
   29|      0|    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
   30|      0|        // Called when the user discards a scene session.
   31|      0|        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
   32|      0|        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
   33|      0|    }
   34|       |
   35|       |
   36|       |}
   37|       |

/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/Recipe.swift:
    1|       |//
    2|       |//  Recipe.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |struct SwiftForFoodResults : Decodable  {
   12|       |    var resultCount : [FoodDetails]
   13|       |    
   14|       |    enum CodingKeys: String, CodingKey {
   15|       |        case resultCount = "results"
   16|       |    }
   17|       |}
   18|       |
   19|       |/*struct FoodResponse: Decodable {
   20|       |    var foods: SwiftForFoodResults
   21|       |}*/
   22|       |
   23|       |struct FoodDetails: Decodable {
   24|       |    var title: String
   25|       |    var ingredients: String
   26|       |    var href: String
   27|       |    var thumbnail: String
   28|       |    
   29|      3|    public init() {
   30|      3|        title = ""
   31|      3|        ingredients = ""
   32|      3|        href = ""
   33|      3|        thumbnail = ""
   34|      3|    }
   35|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/RecipesRequest.swift:
    1|       |//
    2|       |//  RecipesRequest.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public enum FoodError: Error {
   12|       |    case noDataAvailable
   13|       |    case canNotProcessData
   14|       |}
   15|       |protocol FoodViewModelProtocol {
   16|       |    func getSearchResult(completionHandler: @escaping(Result<[FoodDetails],FoodError>) ->Void)
   17|       |}
   18|       |
   19|       |struct FoodRequest: FoodViewModelProtocol {
   20|       |    var countryCode : String
   21|       |    
   22|       |    let defaultSession = URLSession(configuration: .default)
   23|       |    
   24|       |    var dataTask: URLSessionDataTask?
   25|       |    
   26|       |    func getSearchResult(completionHandler: @escaping(Result<[FoodDetails],FoodError>) ->Void)
   27|      2|    {
   28|      2|       dataTask?.cancel()
   29|      2|        
   30|      2|        let resourceString = "http://www.recipepuppy.com/api/?q=\(countryCode)"
   31|      2|        
   32|      2|        
   33|      2|        guard let resourceURL = URL(string: resourceString) else {fatalError()}
   34|      2|        let dataTask = URLSession.shared.dataTask(with: resourceURL) { data, response, error in
   35|      0|            
   36|      0|            if let error = error {
   37|      0|                print(error.localizedDescription)
   38|      0|                completionHandler(.failure(.noDataAvailable))
   39|      0|            } else if let data = data,
   40|      0|                let response = response as? HTTPURLResponse,
   41|      0|                response.statusCode == 200 {
   42|      0|                print(data)
   43|      0|                
   44|      0|                do {
   45|      0|                    let food = try JSONDecoder().decode(SwiftForFoodResults.self, from: data)
   46|      0|                    completionHandler(.success(food.resultCount))
   47|      0|                } catch {
   48|      0|                    completionHandler(.failure(.canNotProcessData))
   49|      0|                }
   50|      0|                
   51|      0|            }
   52|      0|            
   53|      0|        }
   54|      2|        dataTask.resume()
   55|      2|        
   56|      2|    }
   57|      2|    public init(countryCode: String) {
   58|      2|        self.countryCode = countryCode
   59|      2|    }
   60|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/SceneDelegate.swift:
    1|       |//
    2|       |//  SceneDelegate.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class SceneDelegate: UIResponder, UIWindowSceneDelegate {
   12|       |
   13|       |    var window: UIWindow?
   14|       |
   15|       |
   16|      1|    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
   17|      1|        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
   18|      1|        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
   19|      1|        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).
   20|      1|        guard let _ = (scene as? UIWindowScene) else { return }
   21|      1|    }
   22|       |
   23|      0|    func sceneDidDisconnect(_ scene: UIScene) {
   24|      0|        // Called as the scene is being released by the system.
   25|      0|        // This occurs shortly after the scene enters the background, or when its session is discarded.
   26|      0|        // Release any resources associated with this scene that can be re-created the next time the scene connects.
   27|      0|        // The scene may re-connect later, as its session was not neccessarily discarded (see `application:didDiscardSceneSessions` instead).
   28|      0|    }
   29|       |
   30|      1|    func sceneDidBecomeActive(_ scene: UIScene) {
   31|      1|        // Called when the scene has moved from an inactive state to an active state.
   32|      1|        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.
   33|      1|    }
   34|       |
   35|      0|    func sceneWillResignActive(_ scene: UIScene) {
   36|      0|        // Called when the scene will move from an active state to an inactive state.
   37|      0|        // This may occur due to temporary interruptions (ex. an incoming phone call).
   38|      0|    }
   39|       |
   40|      1|    func sceneWillEnterForeground(_ scene: UIScene) {
   41|      1|        // Called as the scene transitions from the background to the foreground.
   42|      1|        // Use this method to undo the changes made on entering the background.
   43|      1|    }
   44|       |
   45|      0|    func sceneDidEnterBackground(_ scene: UIScene) {
   46|      0|        // Called as the scene transitions from the foreground to the background.
   47|      0|        // Use this method to save data, release shared resources, and store enough scene-specific state information
   48|      0|        // to restore the scene back to its current state.
   49|      0|    }
   50|       |
   51|       |
   52|       |}
   53|       |

/Users/aafraneokese/Documents/Learn IoS Features/Functionality/API/APIFoodFinderExample2/APIFoodFinderExample2/ViewController.swift:
    1|       |//
    2|       |//  ViewController.swift
    3|       |//  APIFoodFinderExample2
    4|       |//
    5|       |//  Created by Akua Afrane-Okese on 2020/02/18.
    6|       |//  Copyright © 2020 Akua Afrane-Okese. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class ViewController: UIViewController {
   12|       |
   13|      0|    override func viewDidLoad() {
   14|      0|        super.viewDidLoad()
   15|      0|        // Do any additional setup after loading the view.
   16|      0|    }
   17|       |
   18|       |
   19|       |}
   20|       |

