    1|       |//  SwiftyJSON.swift
    2|       |//
    3|       |//  Copyright (c) 2014 - 2017 Ruoyu Fu, Pinglin Tang
    4|       |//
    5|       |//  Permission is hereby granted, free of charge, to any person obtaining a copy
    6|       |//  of this software and associated documentation files (the "Software"), to deal
    7|       |//  in the Software without restriction, including without limitation the rights
    8|       |//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    9|       |//  copies of the Software, and to permit persons to whom the Software is
   10|       |//  furnished to do so, subject to the following conditions:
   11|       |//
   12|       |//  The above copyright notice and this permission notice shall be included in
   13|       |//  all copies or substantial portions of the Software.
   14|       |//
   15|       |//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   16|       |//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   17|       |//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   18|       |//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   19|       |//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   20|       |//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   21|       |//  THE SOFTWARE.
   22|       |
   23|       |import Foundation
   24|       |
   25|       |// MARK: - Error
   26|       |// swiftlint:disable line_length
   27|       |public enum SwiftyJSONError: Int, Swift.Error {
   28|       |    case unsupportedType = 999
   29|       |    case indexOutOfBounds = 900
   30|       |    case elementTooDeep = 902
   31|       |    case wrongType = 901
   32|       |    case notExist = 500
   33|       |    case invalidJSON = 490
   34|       |}
   35|       |
   36|       |extension SwiftyJSONError: CustomNSError {
   37|       |
   38|       |    /// return the error domain of SwiftyJSONError
   39|      0|    public static var errorDomain: String { return "com.swiftyjson.SwiftyJSON" }
   40|       |
   41|       |    /// return the error code of SwiftyJSONError
   42|      0|    public var errorCode: Int { return self.rawValue }
   43|       |
   44|       |    /// return the userInfo of SwiftyJSONError
   45|      0|    public var errorUserInfo: [String: Any] {
   46|      0|        switch self {
   47|      0|        case .unsupportedType:
   48|      0|            return [NSLocalizedDescriptionKey: "It is an unsupported type."]
   49|      0|        case .indexOutOfBounds:
   50|      0|            return [NSLocalizedDescriptionKey: "Array Index is out of bounds."]
   51|      0|        case .wrongType:
   52|      0|            return [NSLocalizedDescriptionKey: "Couldn't merge, because the JSONs differ in type on top level."]
   53|      0|        case .notExist:
   54|      0|            return [NSLocalizedDescriptionKey: "Dictionary key does not exist."]
   55|      0|        case .invalidJSON:
   56|      0|            return [NSLocalizedDescriptionKey: "JSON is invalid."]
   57|      0|        case .elementTooDeep:
   58|      0|            return [NSLocalizedDescriptionKey: "Element too deep. Increase maxObjectDepth and make sure there is no reference loop."]
   59|      0|        }
   60|      0|    }
   61|       |}
   62|       |
   63|       |// MARK: - JSON Type
   64|       |
   65|       |/**
   66|       |JSON's type definitions.
   67|       |
   68|       |See http://www.json.org
   69|       |*/
   70|       |public enum Type: Int {
   71|       |	case number
   72|       |	case string
   73|       |	case bool
   74|       |	case array
   75|       |	case dictionary
   76|       |	case null
   77|       |	case unknown
   78|       |}
   79|       |
   80|       |// MARK: - JSON Base
   81|       |
   82|       |public struct JSON {
   83|       |
   84|       |	/**
   85|       |	 Creates a JSON using the data.
   86|       |	
   87|       |	 - parameter data: The NSData used to convert to json.Top level object in data is an NSArray or NSDictionary
   88|       |	 - parameter opt: The JSON serialization reading options. `[]` by default.
   89|       |	
   90|       |	 - returns: The created JSON
   91|       |	 */
   92|     44|    public init(data: Data, options opt: JSONSerialization.ReadingOptions = []) throws {
   93|     44|        let object: Any = try JSONSerialization.jsonObject(with: data, options: opt)
   94|     44|        self.init(jsonObject: object)
   95|     44|    }
   96|       |
   97|       |    /**
   98|       |	 Creates a JSON object
   99|       |	 - note: this does not parse a `String` into JSON, instead use `init(parseJSON: String)`
  100|       |	
  101|       |	 - parameter object: the object
  102|       |
  103|       |	 - returns: the created JSON object
  104|       |	 */
  105|  19.2k|    public init(_ object: Any) {
  106|  19.2k|        switch object {
  107|  19.2k|        case let object as Data:
  108|      0|            do {
  109|      0|                try self.init(data: object)
  110|      0|            } catch {
  111|      0|                self.init(jsonObject: NSNull())
  112|  19.2k|            }
  113|  19.2k|        default:
  114|  19.2k|            self.init(jsonObject: object)
  115|  19.2k|        }
  116|  19.2k|    }
  117|       |
  118|       |	/**
  119|       |	 Parses the JSON string into a JSON object
  120|       |	
  121|       |	 - parameter json: the JSON string
  122|       |	
  123|       |	 - returns: the created JSON object
  124|       |	*/
  125|      0|	public init(parseJSON jsonString: String) {
  126|      0|		if let data = jsonString.data(using: .utf8) {
  127|      0|			self.init(data)
  128|      0|		} else {
  129|      0|			self.init(NSNull())
  130|      0|		}
  131|      0|	}
  132|       |
  133|       |	/**
  134|       |	 Creates a JSON using the object.
  135|       |	
  136|       |	 - parameter jsonObject:  The object must have the following properties: All objects are NSString/String, NSNumber/Int/Float/Double/Bool, NSArray/Array, NSDictionary/Dictionary, or NSNull; All dictionary keys are NSStrings/String; NSNumbers are not NaN or infinity.
  137|       |	
  138|       |	 - returns: The created JSON
  139|       |	 */
  140|  19.2k|    fileprivate init(jsonObject: Any) {
  141|  19.2k|        self.object = jsonObject
  142|  19.2k|    }
  143|       |
  144|       |	/**
  145|       |	 Merges another JSON into this JSON, whereas primitive values which are not present in this JSON are getting added,
  146|       |	 present values getting overwritten, array values getting appended and nested JSONs getting merged the same way.
  147|       | 
  148|       |	 - parameter other: The JSON which gets merged into this JSON
  149|       |	
  150|       |	 - throws `ErrorWrongType` if the other JSONs differs in type on the top level.
  151|       |	 */
  152|      0|    public mutating func merge(with other: JSON) throws {
  153|      0|        try self.merge(with: other, typecheck: true)
  154|      0|    }
  155|       |
  156|       |	/**
  157|       |	 Merges another JSON into this JSON and returns a new JSON, whereas primitive values which are not present in this JSON are getting added,
  158|       |	 present values getting overwritten, array values getting appended and nested JSONS getting merged the same way.
  159|       |	
  160|       |	 - parameter other: The JSON which gets merged into this JSON
  161|       |	
  162|       |	 - throws `ErrorWrongType` if the other JSONs differs in type on the top level.
  163|       |	
  164|       |	 - returns: New merged JSON
  165|       |	 */
  166|      0|    public func merged(with other: JSON) throws -> JSON {
  167|      0|        var merged = self
  168|      0|        try merged.merge(with: other, typecheck: true)
  169|      0|        return merged
  170|      0|    }
  171|       |
  172|       |    /**
  173|       |     Private woker function which does the actual merging
  174|       |     Typecheck is set to true for the first recursion level to prevent total override of the source JSON
  175|       | 	*/
  176|      0| 	fileprivate mutating func merge(with other: JSON, typecheck: Bool) throws {
  177|      0|        if self.type == other.type {
  178|      0|            switch self.type {
  179|      0|            case .dictionary:
  180|      0|                for (key, _) in other {
  181|      0|                    try self[key].merge(with: other[key], typecheck: false)
  182|      0|                }
  183|      0|            case .array:
  184|      0|                self = JSON(self.arrayValue + other.arrayValue)
  185|      0|            default:
  186|      0|                self = other
  187|      0|            }
  188|      0|        } else {
  189|      0|            if typecheck {
  190|      0|                throw SwiftyJSONError.wrongType
  191|      0|            } else {
  192|      0|                self = other
  193|      0|            }
  194|      0|        }
  195|      0|    }
  196|       |
  197|       |    /// Private object
  198|       |    fileprivate var rawArray: [Any] = []
  199|       |    fileprivate var rawDictionary: [String: Any] = [:]
  200|       |    fileprivate var rawString: String = ""
  201|       |    fileprivate var rawNumber: NSNumber = 0
  202|       |    fileprivate var rawNull: NSNull = NSNull()
  203|       |    fileprivate var rawBool: Bool = false
  204|       |
  205|       |    /// JSON type, fileprivate setter
  206|       |    public fileprivate(set) var type: Type = .null
  207|       |
  208|       |    /// Error in JSON, fileprivate setter
  209|       |    public fileprivate(set) var error: SwiftyJSONError?
  210|       |
  211|       |    /// Object in JSON
  212|       |    public var object: Any {
  213|  3.46k|        get {
  214|  3.46k|            switch self.type {
  215|  3.46k|            case .array:
  216|      0|                return self.rawArray
  217|  3.46k|            case .dictionary:
  218|      0|                return self.rawDictionary
  219|  3.46k|            case .string:
  220|  3.46k|                return self.rawString
  221|  3.46k|            case .number:
  222|      0|                return self.rawNumber
  223|  3.46k|            case .bool:
  224|      0|                return self.rawBool
  225|  3.46k|            default:
  226|      0|                return self.rawNull
  227|  3.46k|            }
  228|  3.46k|        }
  229|  19.2k|        set {
  230|  19.2k|            error = nil
  231|  19.2k|            switch unwrap(newValue) {
  232|  19.2k|            case let number as NSNumber:
  233|    337|                if number.isBool {
  234|      0|                    type = .bool
  235|      0|                    self.rawBool = number.boolValue
  236|    337|                } else {
  237|    337|                    type = .number
  238|    337|                    self.rawNumber = number
  239|  19.2k|                }
  240|  19.2k|            case let string as String:
  241|  3.46k|                type = .string
  242|  3.46k|                self.rawString = string
  243|  19.2k|            case _ as NSNull:
  244|  8.84k|                type = .null
  245|  19.2k|            case nil:
  246|      0|                type = .null
  247|  19.2k|            case let array as [Any]:
  248|  1.01k|                type = .array
  249|  1.01k|                self.rawArray = array
  250|  19.2k|            case let dictionary as [String: Any]:
  251|  5.61k|                type = .dictionary
  252|  5.61k|                self.rawDictionary = dictionary
  253|  19.2k|            default:
  254|      0|                type = .unknown
  255|      0|                error = SwiftyJSONError.unsupportedType
  256|  19.2k|            }
  257|  19.2k|        }
  258|       |    }
  259|       |
  260|       |    /// The static null JSON
  261|       |    @available(*, unavailable, renamed:"null")
  262|      0|    public static var nullJSON: JSON { return null }
  263|  8.84k|    public static var null: JSON { return JSON(NSNull()) }
  264|       |}
  265|       |
  266|       |/// Private method to unwarp an object recursively
  267|   207k|private func unwrap(_ object: Any) -> Any {
  268|   207k|    switch object {
  269|   207k|    case let json as JSON:
  270|      0|        return unwrap(json.object)
  271|   207k|    case let array as [Any]:
  272|  13.9k|        return array.map(unwrap)
  273|   207k|    case let dictionary as [String: Any]:
  274|  35.9k|        var unwrappedDic = dictionary
  275|   167k|        for (k, v) in dictionary {
  276|   167k|            unwrappedDic[k] = unwrap(v)
  277|   167k|        }
  278|  35.9k|        return unwrappedDic
  279|   207k|    default:
  280|   157k|        return object
  281|   207k|    }
  282|   207k|}
  283|       |
  284|       |public enum Index<T: Any>: Comparable {
  285|       |    case array(Int)
  286|       |    case dictionary(DictionaryIndex<String, T>)
  287|       |    case null
  288|       |
  289|      0|    static public func == (lhs: Index, rhs: Index) -> Bool {
  290|      0|        switch (lhs, rhs) {
  291|      0|        case (.array(let left), .array(let right)):
  292|      0|            return left == right
  293|      0|        case (.dictionary(let left), .dictionary(let right)):
  294|      0|            return left == right
  295|      0|        case (.null, .null): return true
  296|      0|        default:
  297|      0|            return false
  298|      0|        }
  299|      0|    }
  300|       |
  301|      0|    static public func < (lhs: Index, rhs: Index) -> Bool {
  302|      0|        switch (lhs, rhs) {
  303|      0|        case (.array(let left), .array(let right)):
  304|      0|            return left < right
  305|      0|        case (.dictionary(let left), .dictionary(let right)):
  306|      0|            return left < right
  307|      0|        default:
  308|      0|            return false
  309|      0|        }
  310|      0|    }
  311|       |}
  312|       |
  313|       |public typealias JSONIndex = Index<JSON>
  314|       |public typealias JSONRawIndex = Index<Any>
  315|       |
  316|       |extension JSON: Swift.Collection {
  317|       |
  318|       |    public typealias Index = JSONRawIndex
  319|       |
  320|      0|    public var startIndex: Index {
  321|      0|        switch type {
  322|      0|        case .array:
  323|      0|            return .array(rawArray.startIndex)
  324|      0|        case .dictionary:
  325|      0|            return .dictionary(rawDictionary.startIndex)
  326|      0|        default:
  327|      0|            return .null
  328|      0|        }
  329|      0|    }
  330|       |
  331|      0|    public var endIndex: Index {
  332|      0|        switch type {
  333|      0|        case .array:
  334|      0|            return .array(rawArray.endIndex)
  335|      0|        case .dictionary:
  336|      0|            return .dictionary(rawDictionary.endIndex)
  337|      0|        default:
  338|      0|            return .null
  339|      0|        }
  340|      0|    }
  341|       |
  342|      0|    public func index(after i: Index) -> Index {
  343|      0|        switch i {
  344|      0|        case .array(let idx):
  345|      0|            return .array(rawArray.index(after: idx))
  346|      0|        case .dictionary(let idx):
  347|      0|            return .dictionary(rawDictionary.index(after: idx))
  348|      0|        default:
  349|      0|            return .null
  350|      0|        }
  351|      0|    }
  352|       |
  353|      0|    public subscript (position: Index) -> (String, JSON) {
  354|      0|        switch position {
  355|      0|        case .array(let idx):
  356|      0|            return (String(idx), JSON(self.rawArray[idx]))
  357|      0|        case .dictionary(let idx):
  358|      0|            let (key, value) = self.rawDictionary[idx]
  359|      0|            return (key, JSON(value))
  360|      0|        default:
  361|      0|            return ("", JSON.null)
  362|      0|        }
  363|      0|    }
  364|       |}
  365|       |
  366|       |// MARK: - Subscript
  367|       |
  368|       |/**
  369|       | *  To mark both String and Int can be used in subscript.
  370|       | */
  371|       |public enum JSONKey {
  372|       |    case index(Int)
  373|       |    case key(String)
  374|       |}
  375|       |
  376|       |public protocol JSONSubscriptType {
  377|       |    var jsonKey: JSONKey { get }
  378|       |}
  379|       |
  380|       |extension Int: JSONSubscriptType {
  381|      0|    public var jsonKey: JSONKey {
  382|      0|        return JSONKey.index(self)
  383|      0|    }
  384|       |}
  385|       |
  386|       |extension String: JSONSubscriptType {
  387|  8.84k|    public var jsonKey: JSONKey {
  388|  8.84k|        return JSONKey.key(self)
  389|  8.84k|    }
  390|       |}
  391|       |
  392|       |extension JSON {
  393|       |
  394|       |    /// If `type` is `.array`, return json whose object is `array[index]`, otherwise return null json with error.
  395|       |    fileprivate subscript(index index: Int) -> JSON {
  396|      0|        get {
  397|      0|            if self.type != .array {
  398|      0|                var r = JSON.null
  399|      0|                r.error = self.error ?? SwiftyJSONError.wrongType
  400|      0|                return r
  401|      0|            } else if self.rawArray.indices.contains(index) {
  402|      0|                return JSON(self.rawArray[index])
  403|      0|            } else {
  404|      0|                var r = JSON.null
  405|      0|                r.error = SwiftyJSONError.indexOutOfBounds
  406|      0|                return r
  407|      0|            }
  408|      0|        }
  409|      0|        set {
  410|      0|            if self.type == .array &&
  411|      0|                self.rawArray.indices.contains(index) &&
  412|      0|                newValue.error == nil {
  413|      0|                self.rawArray[index] = newValue.object
  414|      0|            }
  415|      0|        }
  416|       |    }
  417|       |
  418|       |    /// If `type` is `.dictionary`, return json whose object is `dictionary[key]` , otherwise return null json with error.
  419|       |    fileprivate subscript(key key: String) -> JSON {
  420|  8.84k|        get {
  421|  8.84k|            var r = JSON.null
  422|  8.84k|            if self.type == .dictionary {
  423|  8.80k|                if let o = self.rawDictionary[key] {
  424|  8.57k|                    r = JSON(o)
  425|  8.80k|                } else {
  426|    231|                    r.error = SwiftyJSONError.notExist
  427|  8.80k|                }
  428|  8.84k|            } else {
  429|     42|                r.error = self.error ?? SwiftyJSONError.wrongType
  430|  8.84k|            }
  431|  8.84k|            return r
  432|  8.84k|        }
  433|      0|        set {
  434|      0|            if self.type == .dictionary && newValue.error == nil {
  435|      0|                self.rawDictionary[key] = newValue.object
  436|      0|            }
  437|      0|        }
  438|       |    }
  439|       |
  440|       |    /// If `sub` is `Int`, return `subscript(index:)`; If `sub` is `String`,  return `subscript(key:)`.
  441|       |    fileprivate subscript(sub sub: JSONSubscriptType) -> JSON {
  442|  8.84k|        get {
  443|  8.84k|            switch sub.jsonKey {
  444|  8.84k|            case .index(let index): return self[index: index]
  445|  8.84k|            case .key(let key): return self[key: key]
  446|  8.84k|            }
  447|  8.84k|        }
  448|      0|        set {
  449|      0|            switch sub.jsonKey {
  450|      0|            case .index(let index): self[index: index] = newValue
  451|      0|            case .key(let key): self[key: key] = newValue
  452|      0|            }
  453|      0|        }
  454|       |    }
  455|       |
  456|       |	/**
  457|       |	 Find a json in the complex data structures by using array of Int and/or String as path.
  458|       |	
  459|       |	 Example:
  460|       |	
  461|       |	 ```
  462|       |	 let json = JSON[data]
  463|       |	 let path = [9,"list","person","name"]
  464|       |	 let name = json[path]
  465|       |	 ```
  466|       |	
  467|       |	 The same as: let name = json[9]["list"]["person"]["name"]
  468|       |	
  469|       |	 - parameter path: The target json's path.
  470|       |	
  471|       |	 - returns: Return a json found by the path or a null json with error
  472|       |	 */
  473|       |    public subscript(path: [JSONSubscriptType]) -> JSON {
  474|  8.84k|        get {
  475|  8.84k|            return path.reduce(self) { $0[sub: $1] }
  476|  8.84k|        }
  477|      0|        set {
  478|      0|            switch path.count {
  479|      0|            case 0:
  480|      0|                return
  481|      0|            case 1:
  482|      0|                self[sub:path[0]].object = newValue.object
  483|      0|            default:
  484|      0|                var aPath = path
  485|      0|                aPath.remove(at: 0)
  486|      0|                var nextJSON = self[sub: path[0]]
  487|      0|                nextJSON[aPath] = newValue
  488|      0|                self[sub: path[0]] = nextJSON
  489|      0|            }
  490|      0|        }
  491|       |    }
  492|       |
  493|       |    /**
  494|       |     Find a json in the complex data structures by using array of Int and/or String as path.
  495|       |
  496|       |     - parameter path: The target json's path. Example:
  497|       |
  498|       |     let name = json[9,"list","person","name"]
  499|       |
  500|       |     The same as: let name = json[9]["list"]["person"]["name"]
  501|       |
  502|       |     - returns: Return a json found by the path or a null json with error
  503|       |     */
  504|       |    public subscript(path: JSONSubscriptType...) -> JSON {
  505|  8.84k|        get {
  506|  8.84k|            return self[path]
  507|  8.84k|        }
  508|      0|        set {
  509|      0|            self[path] = newValue
  510|      0|        }
  511|       |    }
  512|       |}
  513|       |
  514|       |// MARK: - LiteralConvertible
  515|       |
  516|       |extension JSON: Swift.ExpressibleByStringLiteral {
  517|       |
  518|      0|    public init(stringLiteral value: StringLiteralType) {
  519|      0|        self.init(value)
  520|      0|    }
  521|       |
  522|      0|    public init(extendedGraphemeClusterLiteral value: StringLiteralType) {
  523|      0|        self.init(value)
  524|      0|    }
  525|       |
  526|      0|    public init(unicodeScalarLiteral value: StringLiteralType) {
  527|      0|        self.init(value)
  528|      0|    }
  529|       |}
  530|       |
  531|       |extension JSON: Swift.ExpressibleByIntegerLiteral {
  532|       |
  533|      0|    public init(integerLiteral value: IntegerLiteralType) {
  534|      0|        self.init(value)
  535|      0|    }
  536|       |}
  537|       |
  538|       |extension JSON: Swift.ExpressibleByBooleanLiteral {
  539|       |
  540|      0|    public init(booleanLiteral value: BooleanLiteralType) {
  541|      0|        self.init(value)
  542|      0|    }
  543|       |}
  544|       |
  545|       |extension JSON: Swift.ExpressibleByFloatLiteral {
  546|       |
  547|      0|    public init(floatLiteral value: FloatLiteralType) {
  548|      0|        self.init(value)
  549|      0|    }
  550|       |}
  551|       |
  552|       |extension JSON: Swift.ExpressibleByDictionaryLiteral {
  553|      0|    public init(dictionaryLiteral elements: (String, Any)...) {
  554|      0|        let dictionary = elements.reduce(into: [String: Any](), { $0[$1.0] = $1.1})
  555|      0|        self.init(dictionary)
  556|      0|    }
  557|       |}
  558|       |
  559|       |extension JSON: Swift.ExpressibleByArrayLiteral {
  560|       |
  561|      0|    public init(arrayLiteral elements: Any...) {
  562|      0|        self.init(elements)
  563|      0|    }
  564|       |}
  565|       |
  566|       |// MARK: - Raw
  567|       |
  568|       |extension JSON: Swift.RawRepresentable {
  569|       |
  570|      0|    public init?(rawValue: Any) {
  571|      0|        if JSON(rawValue).type == .unknown {
  572|      0|            return nil
  573|      0|        } else {
  574|      0|            self.init(rawValue)
  575|      0|        }
  576|      0|    }
  577|       |
  578|      0|    public var rawValue: Any {
  579|      0|        return self.object
  580|      0|    }
  581|       |
  582|      0|    public func rawData(options opt: JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Data {
  583|      0|        guard JSONSerialization.isValidJSONObject(self.object) else {
  584|      0|            throw SwiftyJSONError.invalidJSON
  585|      0|        }
  586|      0|
  587|      0|        return try JSONSerialization.data(withJSONObject: self.object, options: opt)
  588|      0|	}
  589|       |
  590|      0|	public func rawString(_ encoding: String.Encoding = .utf8, options opt: JSONSerialization.WritingOptions = .prettyPrinted) -> String? {
  591|      0|		do {
  592|      0|			return try _rawString(encoding, options: [.jsonSerialization: opt])
  593|      0|		} catch {
  594|      0|			print("Could not serialize object to JSON because:", error.localizedDescription)
  595|      0|			return nil
  596|      0|		}
  597|      0|	}
  598|       |
  599|      0|	public func rawString(_ options: [writingOptionsKeys: Any]) -> String? {
  600|      0|		let encoding = options[.encoding] as? String.Encoding ?? String.Encoding.utf8
  601|      0|		let maxObjectDepth = options[.maxObjextDepth] as? Int ?? 10
  602|      0|		do {
  603|      0|			return try _rawString(encoding, options: options, maxObjectDepth: maxObjectDepth)
  604|      0|		} catch {
  605|      0|			print("Could not serialize object to JSON because:", error.localizedDescription)
  606|      0|			return nil
  607|      0|		}
  608|      0|	}
  609|       |
  610|      0|	fileprivate func _rawString(_ encoding: String.Encoding = .utf8, options: [writingOptionsKeys: Any], maxObjectDepth: Int = 10) throws -> String? {
  611|      0|        guard maxObjectDepth > 0 else { throw SwiftyJSONError.invalidJSON }
  612|      0|        switch self.type {
  613|      0|        case .dictionary:
  614|      0|			do {
  615|      0|				if !(options[.castNilToNSNull] as? Bool ?? false) {
  616|      0|					let jsonOption = options[.jsonSerialization] as? JSONSerialization.WritingOptions ?? JSONSerialization.WritingOptions.prettyPrinted
  617|      0|					let data = try self.rawData(options: jsonOption)
  618|      0|					return String(data: data, encoding: encoding)
  619|      0|				}
  620|      0|
  621|      0|				guard let dict = self.object as? [String: Any?] else {
  622|      0|					return nil
  623|      0|				}
  624|      0|				let body = try dict.keys.map { key throws -> String in
  625|      0|					guard let value = dict[key] else {
  626|      0|						return "\"\(key)\": null"
  627|      0|					}
  628|      0|					guard let unwrappedValue = value else {
  629|      0|						return "\"\(key)\": null"
  630|      0|					}
  631|      0|
  632|      0|					let nestedValue = JSON(unwrappedValue)
  633|      0|					guard let nestedString = try nestedValue._rawString(encoding, options: options, maxObjectDepth: maxObjectDepth - 1) else {
  634|      0|						throw SwiftyJSONError.elementTooDeep
  635|      0|					}
  636|      0|					if nestedValue.type == .string {
  637|      0|						return "\"\(key)\": \"\(nestedString.replacingOccurrences(of: "\\", with: "\\\\").replacingOccurrences(of: "\"", with: "\\\""))\""
  638|      0|					} else {
  639|      0|						return "\"\(key)\": \(nestedString)"
  640|      0|					}
  641|      0|				}
  642|      0|
  643|      0|				return "{\(body.joined(separator: ","))}"
  644|      0|			} catch _ {
  645|      0|				return nil
  646|      0|			}
  647|      0|        case .array:
  648|      0|            do {
  649|      0|				if !(options[.castNilToNSNull] as? Bool ?? false) {
  650|      0|					let jsonOption = options[.jsonSerialization] as? JSONSerialization.WritingOptions ?? JSONSerialization.WritingOptions.prettyPrinted
  651|      0|					let data = try self.rawData(options: jsonOption)
  652|      0|					return String(data: data, encoding: encoding)
  653|      0|				}
  654|      0|
  655|      0|                guard let array = self.object as? [Any?] else {
  656|      0|                    return nil
  657|      0|                }
  658|      0|                let body = try array.map { value throws -> String in
  659|      0|                    guard let unwrappedValue = value else {
  660|      0|                        return "null"
  661|      0|                    }
  662|      0|
  663|      0|                    let nestedValue = JSON(unwrappedValue)
  664|      0|                    guard let nestedString = try nestedValue._rawString(encoding, options: options, maxObjectDepth: maxObjectDepth - 1) else {
  665|      0|                        throw SwiftyJSONError.invalidJSON
  666|      0|                    }
  667|      0|                    if nestedValue.type == .string {
  668|      0|                        return "\"\(nestedString.replacingOccurrences(of: "\\", with: "\\\\").replacingOccurrences(of: "\"", with: "\\\""))\""
  669|      0|                    } else {
  670|      0|                        return nestedString
  671|      0|                    }
  672|      0|                }
  673|      0|
  674|      0|                return "[\(body.joined(separator: ","))]"
  675|      0|            } catch _ {
  676|      0|                return nil
  677|      0|            }
  678|      0|        case .string:
  679|      0|            return self.rawString
  680|      0|        case .number:
  681|      0|            return self.rawNumber.stringValue
  682|      0|        case .bool:
  683|      0|            return self.rawBool.description
  684|      0|        case .null:
  685|      0|            return "null"
  686|      0|        default:
  687|      0|            return nil
  688|      0|        }
  689|      0|    }
  690|       |}
  691|       |
  692|       |// MARK: - Printable, DebugPrintable
  693|       |
  694|       |extension JSON: Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  695|       |
  696|      0|    public var description: String {
  697|      0|        if let string = self.rawString(options: .prettyPrinted) {
  698|      0|            return string
  699|      0|        } else {
  700|      0|            return "unknown"
  701|      0|        }
  702|      0|    }
  703|       |
  704|      0|    public var debugDescription: String {
  705|      0|        return description
  706|      0|    }
  707|       |}
  708|       |
  709|       |// MARK: - Array
  710|       |
  711|       |extension JSON {
  712|       |
  713|       |    //Optional [JSON]
  714|  1.09k|    public var array: [JSON]? {
  715|  1.09k|        if self.type == .array {
  716|  1.80k|            return self.rawArray.map { JSON($0) }
  717|  1.01k|        } else {
  718|     79|            return nil
  719|     79|        }
  720|      0|    }
  721|       |
  722|       |    //Non-optional [JSON]
  723|  1.09k|    public var arrayValue: [JSON] {
  724|  1.09k|        return self.array ?? []
  725|  1.09k|    }
  726|       |
  727|       |    //Optional [Any]
  728|       |    public var arrayObject: [Any]? {
  729|      0|        get {
  730|      0|            switch self.type {
  731|      0|            case .array:
  732|      0|                return self.rawArray
  733|      0|            default:
  734|      0|                return nil
  735|      0|            }
  736|      0|        }
  737|      0|        set {
  738|      0|            if let array = newValue {
  739|      0|                self.object = array
  740|      0|            } else {
  741|      0|                self.object = NSNull()
  742|      0|            }
  743|      0|        }
  744|       |    }
  745|       |}
  746|       |
  747|       |// MARK: - Dictionary
  748|       |
  749|       |extension JSON {
  750|       |
  751|       |    //Optional [String : JSON]
  752|      0|    public var dictionary: [String: JSON]? {
  753|      0|        if self.type == .dictionary {
  754|      0|            var d = [String: JSON](minimumCapacity: rawDictionary.count)
  755|      0|            for (key, value) in rawDictionary {
  756|      0|                d[key] = JSON(value)
  757|      0|            }
  758|      0|            return d
  759|      0|        } else {
  760|      0|            return nil
  761|      0|        }
  762|      0|    }
  763|       |
  764|       |    //Non-optional [String : JSON]
  765|      0|    public var dictionaryValue: [String: JSON] {
  766|      0|        return self.dictionary ?? [:]
  767|      0|    }
  768|       |
  769|       |    //Optional [String : Any]
  770|       |
  771|       |    public var dictionaryObject: [String: Any]? {
  772|      0|        get {
  773|      0|            switch self.type {
  774|      0|            case .dictionary:
  775|      0|                return self.rawDictionary
  776|      0|            default:
  777|      0|                return nil
  778|      0|            }
  779|      0|        }
  780|      0|        set {
  781|      0|            if let v = newValue {
  782|      0|                self.object = v
  783|      0|            } else {
  784|      0|                self.object = NSNull()
  785|      0|            }
  786|      0|        }
  787|       |    }
  788|       |}
  789|       |
  790|       |// MARK: - Bool
  791|       |
  792|       |extension JSON { // : Swift.Bool
  793|       |
  794|       |    //Optional bool
  795|       |    public var bool: Bool? {
  796|      0|        get {
  797|      0|            switch self.type {
  798|      0|            case .bool:
  799|      0|                return self.rawBool
  800|      0|            default:
  801|      0|                return nil
  802|      0|            }
  803|      0|        }
  804|      0|        set {
  805|      0|            if let newValue = newValue {
  806|      0|                self.object = newValue as Bool
  807|      0|            } else {
  808|      0|                self.object = NSNull()
  809|      0|            }
  810|      0|        }
  811|       |    }
  812|       |
  813|       |    //Non-optional bool
  814|       |    public var boolValue: Bool {
  815|      0|        get {
  816|      0|            switch self.type {
  817|      0|            case .bool:
  818|      0|                return self.rawBool
  819|      0|            case .number:
  820|      0|                return self.rawNumber.boolValue
  821|      0|            case .string:
  822|      0|                return ["true", "y", "t", "yes", "1"].contains { self.rawString.caseInsensitiveCompare($0) == .orderedSame }
  823|      0|            default:
  824|      0|                return false
  825|      0|            }
  826|      0|        }
  827|      0|        set {
  828|      0|            self.object = newValue
  829|      0|        }
  830|       |    }
  831|       |}
  832|       |
  833|       |// MARK: - String
  834|       |
  835|       |extension JSON {
  836|       |
  837|       |    //Optional string
  838|       |    public var string: String? {
  839|    700|        get {
  840|    700|            switch self.type {
  841|    700|            case .string:
  842|    658|                return self.object as? String
  843|    700|            default:
  844|     42|                return nil
  845|    700|            }
  846|    700|        }
  847|      0|        set {
  848|      0|            if let newValue = newValue {
  849|      0|                self.object = NSString(string: newValue)
  850|      0|            } else {
  851|      0|                self.object = NSNull()
  852|      0|            }
  853|      0|        }
  854|       |    }
  855|       |
  856|       |    //Non-optional string
  857|       |    public var stringValue: String {
  858|  3.25k|        get {
  859|  3.25k|            switch self.type {
  860|  3.25k|            case .string:
  861|  2.80k|                return self.object as? String ?? ""
  862|  3.25k|            case .number:
  863|    337|                return self.rawNumber.stringValue
  864|  3.25k|            case .bool:
  865|      0|                return (self.object as? Bool).map { String($0) } ?? ""
  866|  3.25k|            default:
  867|    110|                return ""
  868|  3.25k|            }
  869|  3.25k|        }
  870|      0|        set {
  871|      0|            self.object = NSString(string: newValue)
  872|      0|        }
  873|       |    }
  874|       |}
  875|       |
  876|       |// MARK: - Number
  877|       |
  878|       |extension JSON {
  879|       |
  880|       |    //Optional number
  881|       |    public var number: NSNumber? {
  882|      0|        get {
  883|      0|            switch self.type {
  884|      0|            case .number:
  885|      0|                return self.rawNumber
  886|      0|            case .bool:
  887|      0|                return NSNumber(value: self.rawBool ? 1 : 0)
  888|      0|            default:
  889|      0|                return nil
  890|      0|            }
  891|      0|        }
  892|      0|        set {
  893|      0|            self.object = newValue ?? NSNull()
  894|      0|        }
  895|       |    }
  896|       |
  897|       |    //Non-optional number
  898|       |    public var numberValue: NSNumber {
  899|      0|        get {
  900|      0|            switch self.type {
  901|      0|            case .string:
  902|      0|                let decimal = NSDecimalNumber(string: self.object as? String)
  903|      0|                if decimal == NSDecimalNumber.notANumber {  // indicates parse error
  904|      0|                    return NSDecimalNumber.zero
  905|      0|                }
  906|      0|                return decimal
  907|      0|            case .number:
  908|      0|                return self.object as? NSNumber ?? NSNumber(value: 0)
  909|      0|            case .bool:
  910|      0|                return NSNumber(value: self.rawBool ? 1 : 0)
  911|      0|            default:
  912|      0|                return NSNumber(value: 0.0)
  913|      0|            }
  914|      0|        }
  915|      0|        set {
  916|      0|            self.object = newValue
  917|      0|        }
  918|       |    }
  919|       |}
  920|       |
  921|       |// MARK: - Null
  922|       |
  923|       |extension JSON {
  924|       |
  925|       |    public var null: NSNull? {
  926|      0|        get {
  927|      0|            switch self.type {
  928|      0|            case .null:
  929|      0|                return self.rawNull
  930|      0|            default:
  931|      0|                return nil
  932|      0|            }
  933|      0|        }
  934|      0|        set {
  935|      0|            self.object = NSNull()
  936|      0|        }
  937|       |    }
  938|      0|    public func exists() -> Bool {
  939|      0|        if let errorValue = error, (400...1000).contains(errorValue.errorCode) {
  940|      0|            return false
  941|      0|        }
  942|      0|        return true
  943|      0|    }
  944|       |}
  945|       |
  946|       |// MARK: - URL
  947|       |
  948|       |extension JSON {
  949|       |
  950|       |    //Optional URL
  951|       |    public var url: URL? {
  952|      0|        get {
  953|      0|            switch self.type {
  954|      0|            case .string:
  955|      0|                // Check for existing percent escapes first to prevent double-escaping of % character
  956|      0|                if self.rawString.range(of: "%[0-9A-Fa-f]{2}", options: .regularExpression, range: nil, locale: nil) != nil {
  957|      0|                    return Foundation.URL(string: self.rawString)
  958|      0|                } else if let encodedString_ = self.rawString.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed) {
  959|      0|                    // We have to use `Foundation.URL` otherwise it conflicts with the variable name.
  960|      0|                    return Foundation.URL(string: encodedString_)
  961|      0|                } else {
  962|      0|                    return nil
  963|      0|                }
  964|      0|            default:
  965|      0|                return nil
  966|      0|            }
  967|      0|        }
  968|      0|        set {
  969|      0|            self.object = newValue?.absoluteString ?? NSNull()
  970|      0|        }
  971|       |    }
  972|       |}
  973|       |
  974|       |// MARK: - Int, Double, Float, Int8, Int16, Int32, Int64
  975|       |
  976|       |extension JSON {
  977|       |
  978|       |    public var double: Double? {
  979|      0|        get {
  980|      0|            return self.number?.doubleValue
  981|      0|        }
  982|      0|        set {
  983|      0|            if let newValue = newValue {
  984|      0|                self.object = NSNumber(value: newValue)
  985|      0|            } else {
  986|      0|                self.object = NSNull()
  987|      0|            }
  988|      0|        }
  989|       |    }
  990|       |
  991|       |    public var doubleValue: Double {
  992|      0|        get {
  993|      0|            return self.numberValue.doubleValue
  994|      0|        }
  995|      0|        set {
  996|      0|            self.object = NSNumber(value: newValue)
  997|      0|        }
  998|       |    }
  999|       |
 1000|       |    public var float: Float? {
 1001|      0|        get {
 1002|      0|            return self.number?.floatValue
 1003|      0|        }
 1004|      0|        set {
 1005|      0|            if let newValue = newValue {
 1006|      0|                self.object = NSNumber(value: newValue)
 1007|      0|            } else {
 1008|      0|                self.object = NSNull()
 1009|      0|            }
 1010|      0|        }
 1011|       |    }
 1012|       |
 1013|       |    public var floatValue: Float {
 1014|      0|        get {
 1015|      0|            return self.numberValue.floatValue
 1016|      0|        }
 1017|      0|        set {
 1018|      0|            self.object = NSNumber(value: newValue)
 1019|      0|        }
 1020|       |    }
 1021|       |
 1022|       |    public var int: Int? {
 1023|      0|        get {
 1024|      0|            return self.number?.intValue
 1025|      0|        }
 1026|      0|        set {
 1027|      0|            if let newValue = newValue {
 1028|      0|                self.object = NSNumber(value: newValue)
 1029|      0|            } else {
 1030|      0|                self.object = NSNull()
 1031|      0|            }
 1032|      0|        }
 1033|       |    }
 1034|       |
 1035|       |    public var intValue: Int {
 1036|      0|        get {
 1037|      0|            return self.numberValue.intValue
 1038|      0|        }
 1039|      0|        set {
 1040|      0|            self.object = NSNumber(value: newValue)
 1041|      0|        }
 1042|       |    }
 1043|       |
 1044|       |    public var uInt: UInt? {
 1045|      0|        get {
 1046|      0|            return self.number?.uintValue
 1047|      0|        }
 1048|      0|        set {
 1049|      0|            if let newValue = newValue {
 1050|      0|                self.object = NSNumber(value: newValue)
 1051|      0|            } else {
 1052|      0|                self.object = NSNull()
 1053|      0|            }
 1054|      0|        }
 1055|       |    }
 1056|       |
 1057|       |    public var uIntValue: UInt {
 1058|      0|        get {
 1059|      0|            return self.numberValue.uintValue
 1060|      0|        }
 1061|      0|        set {
 1062|      0|            self.object = NSNumber(value: newValue)
 1063|      0|        }
 1064|       |    }
 1065|       |
 1066|       |    public var int8: Int8? {
 1067|      0|        get {
 1068|      0|            return self.number?.int8Value
 1069|      0|        }
 1070|      0|        set {
 1071|      0|            if let newValue = newValue {
 1072|      0|                self.object = NSNumber(value: Int(newValue))
 1073|      0|            } else {
 1074|      0|                self.object =  NSNull()
 1075|      0|            }
 1076|      0|        }
 1077|       |    }
 1078|       |
 1079|       |    public var int8Value: Int8 {
 1080|      0|        get {
 1081|      0|            return self.numberValue.int8Value
 1082|      0|        }
 1083|      0|        set {
 1084|      0|            self.object = NSNumber(value: Int(newValue))
 1085|      0|        }
 1086|       |    }
 1087|       |
 1088|       |    public var uInt8: UInt8? {
 1089|      0|        get {
 1090|      0|            return self.number?.uint8Value
 1091|      0|        }
 1092|      0|        set {
 1093|      0|            if let newValue = newValue {
 1094|      0|                self.object = NSNumber(value: newValue)
 1095|      0|            } else {
 1096|      0|                self.object =  NSNull()
 1097|      0|            }
 1098|      0|        }
 1099|       |    }
 1100|       |
 1101|       |    public var uInt8Value: UInt8 {
 1102|      0|        get {
 1103|      0|            return self.numberValue.uint8Value
 1104|      0|        }
 1105|      0|        set {
 1106|      0|            self.object = NSNumber(value: newValue)
 1107|      0|        }
 1108|       |    }
 1109|       |
 1110|       |    public var int16: Int16? {
 1111|      0|        get {
 1112|      0|            return self.number?.int16Value
 1113|      0|        }
 1114|      0|        set {
 1115|      0|            if let newValue = newValue {
 1116|      0|                self.object = NSNumber(value: newValue)
 1117|      0|            } else {
 1118|      0|                self.object =  NSNull()
 1119|      0|            }
 1120|      0|        }
 1121|       |    }
 1122|       |
 1123|       |    public var int16Value: Int16 {
 1124|      0|        get {
 1125|      0|            return self.numberValue.int16Value
 1126|      0|        }
 1127|      0|        set {
 1128|      0|            self.object = NSNumber(value: newValue)
 1129|      0|        }
 1130|       |    }
 1131|       |
 1132|       |    public var uInt16: UInt16? {
 1133|      0|        get {
 1134|      0|            return self.number?.uint16Value
 1135|      0|        }
 1136|      0|        set {
 1137|      0|            if let newValue = newValue {
 1138|      0|                self.object = NSNumber(value: newValue)
 1139|      0|            } else {
 1140|      0|                self.object =  NSNull()
 1141|      0|            }
 1142|      0|        }
 1143|       |    }
 1144|       |
 1145|       |    public var uInt16Value: UInt16 {
 1146|      0|        get {
 1147|      0|            return self.numberValue.uint16Value
 1148|      0|        }
 1149|      0|        set {
 1150|      0|            self.object = NSNumber(value: newValue)
 1151|      0|        }
 1152|       |    }
 1153|       |
 1154|       |    public var int32: Int32? {
 1155|      0|        get {
 1156|      0|            return self.number?.int32Value
 1157|      0|        }
 1158|      0|        set {
 1159|      0|            if let newValue = newValue {
 1160|      0|                self.object = NSNumber(value: newValue)
 1161|      0|            } else {
 1162|      0|                self.object =  NSNull()
 1163|      0|            }
 1164|      0|        }
 1165|       |    }
 1166|       |
 1167|       |    public var int32Value: Int32 {
 1168|      0|        get {
 1169|      0|            return self.numberValue.int32Value
 1170|      0|        }
 1171|      0|        set {
 1172|      0|            self.object = NSNumber(value: newValue)
 1173|      0|        }
 1174|       |    }
 1175|       |
 1176|       |    public var uInt32: UInt32? {
 1177|      0|        get {
 1178|      0|            return self.number?.uint32Value
 1179|      0|        }
 1180|      0|        set {
 1181|      0|            if let newValue = newValue {
 1182|      0|                self.object = NSNumber(value: newValue)
 1183|      0|            } else {
 1184|      0|                self.object =  NSNull()
 1185|      0|            }
 1186|      0|        }
 1187|       |    }
 1188|       |
 1189|       |    public var uInt32Value: UInt32 {
 1190|      0|        get {
 1191|      0|            return self.numberValue.uint32Value
 1192|      0|        }
 1193|      0|        set {
 1194|      0|            self.object = NSNumber(value: newValue)
 1195|      0|        }
 1196|       |    }
 1197|       |
 1198|       |    public var int64: Int64? {
 1199|      0|        get {
 1200|      0|            return self.number?.int64Value
 1201|      0|        }
 1202|      0|        set {
 1203|      0|            if let newValue = newValue {
 1204|      0|                self.object = NSNumber(value: newValue)
 1205|      0|            } else {
 1206|      0|                self.object =  NSNull()
 1207|      0|            }
 1208|      0|        }
 1209|       |    }
 1210|       |
 1211|       |    public var int64Value: Int64 {
 1212|      0|        get {
 1213|      0|            return self.numberValue.int64Value
 1214|      0|        }
 1215|      0|        set {
 1216|      0|            self.object = NSNumber(value: newValue)
 1217|      0|        }
 1218|       |    }
 1219|       |
 1220|       |    public var uInt64: UInt64? {
 1221|      0|        get {
 1222|      0|            return self.number?.uint64Value
 1223|      0|        }
 1224|      0|        set {
 1225|      0|            if let newValue = newValue {
 1226|      0|                self.object = NSNumber(value: newValue)
 1227|      0|            } else {
 1228|      0|                self.object =  NSNull()
 1229|      0|            }
 1230|      0|        }
 1231|       |    }
 1232|       |
 1233|       |    public var uInt64Value: UInt64 {
 1234|      0|        get {
 1235|      0|            return self.numberValue.uint64Value
 1236|      0|        }
 1237|      0|        set {
 1238|      0|            self.object = NSNumber(value: newValue)
 1239|      0|        }
 1240|       |    }
 1241|       |}
 1242|       |
 1243|       |// MARK: - Comparable
 1244|       |
 1245|       |extension JSON: Swift.Comparable {}
 1246|       |
 1247|      0|public func == (lhs: JSON, rhs: JSON) -> Bool {
 1248|      0|
 1249|      0|    switch (lhs.type, rhs.type) {
 1250|      0|    case (.number, .number):
 1251|      0|        return lhs.rawNumber == rhs.rawNumber
 1252|      0|    case (.string, .string):
 1253|      0|        return lhs.rawString == rhs.rawString
 1254|      0|    case (.bool, .bool):
 1255|      0|        return lhs.rawBool == rhs.rawBool
 1256|      0|    case (.array, .array):
 1257|      0|        return lhs.rawArray as NSArray == rhs.rawArray as NSArray
 1258|      0|    case (.dictionary, .dictionary):
 1259|      0|        return lhs.rawDictionary as NSDictionary == rhs.rawDictionary as NSDictionary
 1260|      0|    case (.null, .null):
 1261|      0|        return true
 1262|      0|    default:
 1263|      0|        return false
 1264|      0|    }
 1265|      0|}
 1266|       |
 1267|      0|public func <= (lhs: JSON, rhs: JSON) -> Bool {
 1268|      0|
 1269|      0|    switch (lhs.type, rhs.type) {
 1270|      0|    case (.number, .number):
 1271|      0|        return lhs.rawNumber <= rhs.rawNumber
 1272|      0|    case (.string, .string):
 1273|      0|        return lhs.rawString <= rhs.rawString
 1274|      0|    case (.bool, .bool):
 1275|      0|        return lhs.rawBool == rhs.rawBool
 1276|      0|    case (.array, .array):
 1277|      0|        return lhs.rawArray as NSArray == rhs.rawArray as NSArray
 1278|      0|    case (.dictionary, .dictionary):
 1279|      0|        return lhs.rawDictionary as NSDictionary == rhs.rawDictionary as NSDictionary
 1280|      0|    case (.null, .null):
 1281|      0|        return true
 1282|      0|    default:
 1283|      0|        return false
 1284|      0|    }
 1285|      0|}
 1286|       |
 1287|      0|public func >= (lhs: JSON, rhs: JSON) -> Bool {
 1288|      0|
 1289|      0|    switch (lhs.type, rhs.type) {
 1290|      0|    case (.number, .number):
 1291|      0|        return lhs.rawNumber >= rhs.rawNumber
 1292|      0|    case (.string, .string):
 1293|      0|        return lhs.rawString >= rhs.rawString
 1294|      0|    case (.bool, .bool):
 1295|      0|        return lhs.rawBool == rhs.rawBool
 1296|      0|    case (.array, .array):
 1297|      0|        return lhs.rawArray as NSArray == rhs.rawArray as NSArray
 1298|      0|    case (.dictionary, .dictionary):
 1299|      0|        return lhs.rawDictionary as NSDictionary == rhs.rawDictionary as NSDictionary
 1300|      0|    case (.null, .null):
 1301|      0|        return true
 1302|      0|    default:
 1303|      0|        return false
 1304|      0|    }
 1305|      0|}
 1306|       |
 1307|      0|public func > (lhs: JSON, rhs: JSON) -> Bool {
 1308|      0|
 1309|      0|    switch (lhs.type, rhs.type) {
 1310|      0|    case (.number, .number):
 1311|      0|        return lhs.rawNumber > rhs.rawNumber
 1312|      0|    case (.string, .string):
 1313|      0|        return lhs.rawString > rhs.rawString
 1314|      0|    default:
 1315|      0|        return false
 1316|      0|    }
 1317|      0|}
 1318|       |
 1319|      0|public func < (lhs: JSON, rhs: JSON) -> Bool {
 1320|      0|
 1321|      0|    switch (lhs.type, rhs.type) {
 1322|      0|    case (.number, .number):
 1323|      0|        return lhs.rawNumber < rhs.rawNumber
 1324|      0|    case (.string, .string):
 1325|      0|        return lhs.rawString < rhs.rawString
 1326|      0|    default:
 1327|      0|        return false
 1328|      0|    }
 1329|      0|}
 1330|       |
 1331|       |private let trueNumber = NSNumber(value: true)
 1332|       |private let falseNumber = NSNumber(value: false)
 1333|       |private let trueObjCType = String(cString: trueNumber.objCType)
 1334|       |private let falseObjCType = String(cString: falseNumber.objCType)
 1335|       |
 1336|       |// MARK: - NSNumber: Comparable
 1337|       |
 1338|       |extension NSNumber {
 1339|    337|    fileprivate var isBool: Bool {
 1340|    337|        let objCType = String(cString: self.objCType)
 1341|    337|        if (self.compare(trueNumber) == .orderedSame && objCType == trueObjCType) || (self.compare(falseNumber) == .orderedSame && objCType == falseObjCType) {
 1342|      0|            return true
 1343|    337|        } else {
 1344|    337|            return false
 1345|    337|        }
 1346|      0|    }
 1347|       |}
 1348|       |
 1349|      0|func == (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1350|      0|    switch (lhs.isBool, rhs.isBool) {
 1351|      0|    case (false, true):
 1352|      0|        return false
 1353|      0|    case (true, false):
 1354|      0|        return false
 1355|      0|    default:
 1356|      0|        return lhs.compare(rhs) == .orderedSame
 1357|      0|    }
 1358|      0|}
 1359|       |
 1360|      0|func != (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1361|      0|    return !(lhs == rhs)
 1362|      0|}
 1363|       |
 1364|      0|func < (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1365|      0|
 1366|      0|    switch (lhs.isBool, rhs.isBool) {
 1367|      0|    case (false, true):
 1368|      0|        return false
 1369|      0|    case (true, false):
 1370|      0|        return false
 1371|      0|    default:
 1372|      0|        return lhs.compare(rhs) == .orderedAscending
 1373|      0|    }
 1374|      0|}
 1375|       |
 1376|      0|func > (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1377|      0|
 1378|      0|    switch (lhs.isBool, rhs.isBool) {
 1379|      0|    case (false, true):
 1380|      0|        return false
 1381|      0|    case (true, false):
 1382|      0|        return false
 1383|      0|    default:
 1384|      0|        return lhs.compare(rhs) == ComparisonResult.orderedDescending
 1385|      0|    }
 1386|      0|}
 1387|       |
 1388|      0|func <= (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1389|      0|
 1390|      0|    switch (lhs.isBool, rhs.isBool) {
 1391|      0|    case (false, true):
 1392|      0|        return false
 1393|      0|    case (true, false):
 1394|      0|        return false
 1395|      0|    default:
 1396|      0|        return lhs.compare(rhs) != .orderedDescending
 1397|      0|    }
 1398|      0|}
 1399|       |
 1400|      0|func >= (lhs: NSNumber, rhs: NSNumber) -> Bool {
 1401|      0|
 1402|      0|    switch (lhs.isBool, rhs.isBool) {
 1403|      0|    case (false, true):
 1404|      0|        return false
 1405|      0|    case (true, false):
 1406|      0|        return false
 1407|      0|    default:
 1408|      0|        return lhs.compare(rhs) != .orderedAscending
 1409|      0|    }
 1410|      0|}
 1411|       |
 1412|       |public enum writingOptionsKeys {
 1413|       |	case jsonSerialization
 1414|       |	case castNilToNSNull
 1415|       |	case maxObjextDepth
 1416|       |	case encoding
 1417|       |}
 1418|       |
 1419|       |// MARK: - JSON: Codable
 1420|       |extension JSON: Codable {
 1421|      0|    private static var codableTypes: [Codable.Type] {
 1422|      0|        return [
 1423|      0|            Bool.self,
 1424|      0|            Int.self,
 1425|      0|            Int8.self,
 1426|      0|            Int16.self,
 1427|      0|            Int32.self,
 1428|      0|            Int64.self,
 1429|      0|            UInt.self,
 1430|      0|            UInt8.self,
 1431|      0|            UInt16.self,
 1432|      0|            UInt32.self,
 1433|      0|            UInt64.self,
 1434|      0|            Double.self,
 1435|      0|            String.self,
 1436|      0|            [JSON].self,
 1437|      0|            [String: JSON].self
 1438|      0|        ]
 1439|      0|    }
 1440|      0|    public init(from decoder: Decoder) throws {
 1441|      0|        var object: Any?
 1442|      0|
 1443|      0|        if let container = try? decoder.singleValueContainer(), !container.decodeNil() {
 1444|      0|            for type in JSON.codableTypes {
 1445|      0|                if object != nil {
 1446|      0|                    break
 1447|      0|                }
 1448|      0|                // try to decode value
 1449|      0|                switch type {
 1450|      0|                case let boolType as Bool.Type:
 1451|      0|                    object = try? container.decode(boolType)
 1452|      0|                case let intType as Int.Type:
 1453|      0|                    object = try? container.decode(intType)
 1454|      0|                case let int8Type as Int8.Type:
 1455|      0|                    object = try? container.decode(int8Type)
 1456|      0|                case let int32Type as Int32.Type:
 1457|      0|                    object = try? container.decode(int32Type)
 1458|      0|                case let int64Type as Int64.Type:
 1459|      0|                    object = try? container.decode(int64Type)
 1460|      0|                case let uintType as UInt.Type:
 1461|      0|                    object = try? container.decode(uintType)
 1462|      0|                case let uint8Type as UInt8.Type:
 1463|      0|                    object = try? container.decode(uint8Type)
 1464|      0|                case let uint16Type as UInt16.Type:
 1465|      0|                    object = try? container.decode(uint16Type)
 1466|      0|                case let uint32Type as UInt32.Type:
 1467|      0|                    object = try? container.decode(uint32Type)
 1468|      0|                case let uint64Type as UInt64.Type:
 1469|      0|                    object = try? container.decode(uint64Type)
 1470|      0|                case let doubleType as Double.Type:
 1471|      0|                    object = try? container.decode(doubleType)
 1472|      0|                case let stringType as String.Type:
 1473|      0|                    object = try? container.decode(stringType)
 1474|      0|                case let jsonValueArrayType as [JSON].Type:
 1475|      0|                    object = try? container.decode(jsonValueArrayType)
 1476|      0|                case let jsonValueDictType as [String: JSON].Type:
 1477|      0|                    object = try? container.decode(jsonValueDictType)
 1478|      0|                default:
 1479|      0|                    break
 1480|      0|                }
 1481|      0|            }
 1482|      0|        }
 1483|      0|        self.init(object ?? NSNull())
 1484|      0|    }
 1485|      0|    public func encode(to encoder: Encoder) throws {
 1486|      0|        var container = encoder.singleValueContainer()
 1487|      0|        if object is NSNull {
 1488|      0|            try container.encodeNil()
 1489|      0|            return
 1490|      0|        }
 1491|      0|        switch object {
 1492|      0|        case let intValue as Int:
 1493|      0|            try container.encode(intValue)
 1494|      0|        case let int8Value as Int8:
 1495|      0|            try container.encode(int8Value)
 1496|      0|        case let int32Value as Int32:
 1497|      0|            try container.encode(int32Value)
 1498|      0|        case let int64Value as Int64:
 1499|      0|            try container.encode(int64Value)
 1500|      0|        case let uintValue as UInt:
 1501|      0|            try container.encode(uintValue)
 1502|      0|        case let uint8Value as UInt8:
 1503|      0|            try container.encode(uint8Value)
 1504|      0|        case let uint16Value as UInt16:
 1505|      0|            try container.encode(uint16Value)
 1506|      0|        case let uint32Value as UInt32:
 1507|      0|            try container.encode(uint32Value)
 1508|      0|        case let uint64Value as UInt64:
 1509|      0|            try container.encode(uint64Value)
 1510|      0|        case let doubleValue as Double:
 1511|      0|            try container.encode(doubleValue)
 1512|      0|        case let boolValue as Bool:
 1513|      0|            try container.encode(boolValue)
 1514|      0|        case let stringValue as String:
 1515|      0|            try container.encode(stringValue)
 1516|      0|        case is [Any]:
 1517|      0|            let jsonValueArray = array ?? []
 1518|      0|            try container.encode(jsonValueArray)
 1519|      0|        case is [String: Any]:
 1520|      0|            let jsonValueDictValue = dictionary ?? [:]
 1521|      0|            try container.encode(jsonValueDictValue)
 1522|      0|        default:
 1523|      0|            break
 1524|      0|        }
 1525|      0|    }
 1526|       |}

