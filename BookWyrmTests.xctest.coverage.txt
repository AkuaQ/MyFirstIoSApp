/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/CriticReviewViewModelTests.swift:
    1|       |//
    2|       |//  CriticReviewViewModelTest.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/07.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |class MockCriticReviewRepo: CriticReviewsRepositoring {
   10|       |    var counter = 0
   11|       |    
   12|      0|    func setViewModel(vModel: CriticReviewsViewModelling) {
   13|      0|        counter += 1
   14|      0|    }
   15|       |    
   16|      0|    func fetchReviews(reviewData: String) {
   17|      0|        counter += 1
   18|      0|    }
   19|       |    
   20|      0|    func verify() {
   21|      0|        XCTAssert(counter == 2)
   22|      0|    }
   23|       |    
   24|      0|    func resetCounter() {
   25|      0|        counter = 0
   26|      0|    }
   27|       |}
   28|       |
   29|       |class MockCriticReviewView: NSObject, ReviewsControllable {
   30|       |    
   31|       |    var secondTest = false
   32|       |    
   33|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   34|      0|        if !secondTest {
   35|      0|            XCTAssert(title == "Network Error" && error == "Please check your internet connection and refresh")
   36|      0|        } else {
   37|      0|            XCTAssert(title == "No Results Found" && error == "Bad version of book selected. Look for an alternative version")
   38|      0|        }
   39|      0|    }
   40|       |    
   41|       |    var counter = 0
   42|       |    
   43|      0|    func reloadTable() {
   44|      0|        counter += 1
   45|      0|    }
   46|       |    
   47|      0|    func verify() {
   48|      0|        XCTAssert(counter == 1)
   49|      0|    }
   50|       |    
   51|      0|    func resetCounter() {
   52|      0|        counter = 0
   53|      0|    }
   54|       |}
   55|       |
   56|       |import XCTest
   57|       |@testable import BookWyrm
   58|       |
   59|       |class CriticReviewViewModelTests: XCTestCase {
   60|       |    
   61|       |    var serviceUnderTest: CriticReviewsViewModel?
   62|       |    let mockRepo = MockCriticReviewRepo()
   63|       |    let mockView =  MockCriticReviewView()
   64|       |
   65|      0|    override func setUp() {
   66|      0|        // Put setup code here. This method is called before the invocation of each test method in the class.
   67|      0|    }
   68|       |
   69|      0|    override func tearDown() {
   70|      0|        mockView.resetCounter()
   71|      0|        mockRepo.resetCounter()
   72|      0|    }
   73|       |    
   74|      0|    func testThatFetchingResultsAsksRepoForResults() {
   75|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
   76|      0|        serviceUnderTest?.fetchResults(for: "Test Data")
   77|      0|        mockRepo.verify()
   78|      0|    }
   79|       |
   80|      0|    func testThatSettingResultsReloadsDataInTableView() {
   81|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
   82|      0|        var testResults: [ReviewModel] = []
   83|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink.com", reviewerName: "Zaheer", rating: "3", review: "Hello"))
   84|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink2.com", reviewerName: "Zaheer", rating: "5", review: "World"))
   85|      0|        serviceUnderTest?.setResults(testResults)
   86|      0|        mockView.verify()
   87|      0|    }
   88|       |    
   89|      0|    func testResultCountIsCorrect() {
   90|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
   91|      0|        var testResults: [ReviewModel] = []
   92|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink.com", reviewerName: "Zaheer", rating: "3", review: "Hello"))
   93|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink2.com", reviewerName: "Zaheer", rating: "5", review: "World"))
   94|      0|        serviceUnderTest?.setResults(testResults)
   95|      0|        XCTAssert(serviceUnderTest?.countResults() == 2)
   96|      0|    }
   97|       |    
   98|      0|    func testCorrectReviewIsReturned() {
   99|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
  100|      0|        var testResults: [ReviewModel] = []
  101|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink.com", reviewerName: "Zaheer", rating: "3", review: "Hello"))
  102|      0|        testResults.append(ReviewModel(reviewerImageLink: "www.booklink2.com", reviewerName: "Zaheer", rating: "5", review: "World"))
  103|      0|        serviceUnderTest?.setResults(testResults)
  104|      0|        XCTAssert(serviceUnderTest?.getReview(index: 1).review  == "World")
  105|      0|    }
  106|       |    
  107|      0|    func testErrorMessageShownOnErrorFromBadNetwork() {
  108|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
  109|      0|        mockView.secondTest = false
  110|      0|        serviceUnderTest?.errorAlert("Network")
  111|      0|    }
  112|       |    
  113|      0|    func testErrorMessageShownOnErrorFromNoResults() {
  114|      0|        serviceUnderTest = CriticReviewsViewModel(view: mockView, repo: mockRepo)
  115|      0|        mockView.secondTest = true
  116|      0|        serviceUnderTest?.errorAlert("Empty")
  117|      0|    }
  118|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/DetailViewModelTests.swift:
    1|       |//
    2|       |//  DetailViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/12.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import BookWyrm
   11|       |
   12|       |class MockDetailView: DetailViewControllable {
   13|      0|    func setReviewInfo(review: ReviewModel) {
   14|      0|        if !thirdTest {
   15|      0|            XCTAssert(review.reviewerImageLink == "pic.image.com" && review.reviewerName == "NY Times")
   16|      0|        } else {
   17|      0|            XCTAssert(review.reviewerImageLink == "" && review.reviewerName == "Guardian")
   18|      0|        }
   19|      0|    }
   20|       |    
   21|      0|    func setNewModel(model: ExtraDetailsModel) {
   22|      0|        if ratingTest {
   23|      0|            XCTAssert(model.avgRating == "4")
   24|      0|            XCTAssert(model.numReviews == "800K ratings")
   25|      0|        } else if ratingTest2 {
   26|      0|            XCTAssert(model.avgRating == "5")
   27|      0|            XCTAssert(model.numReviews == "2M ratings")
   28|      0|        }
   29|      0|    }
   30|       |    
   31|       |    var secondTest = false
   32|       |    var thirdTest = false
   33|       |    var ratingTest = false
   34|       |    var ratingTest2 = false
   35|       |
   36|       |    var errorTestNumber = 0
   37|       |    
   38|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   39|      0|        switch errorTestNumber {
   40|      0|        case 1:
   41|      0|            XCTAssert(error == "Please check your internet connection and try again" && title == "Network Error")
   42|      0|        case 2:
   43|      0|            XCTAssert(error == "Unable to add/remove item. Please try again later" && title == "Unsuccessful Operation")
   44|      0|        case 3:
   45|      0|            XCTAssert(error == "Could not find matching book on server. Please ensure you have a valid book version" && title == "Invalid Book")
   46|      0|        case 4:
   47|      0|            XCTAssert(error == "Unable to obtain login token. Please restart the app" && title == "Authentication Error")
   48|      0|        case 5:
   49|      0|            XCTAssert(error == "Incorrect format of number of reviews received" && title == "Data Retrieval Error")
   50|      0|        default:
   51|      0|            XCTAssert(false)
   52|      0|        }
   53|      0|    }
   54|       |    
   55|      0|    func setReadStatus(read: Bool) {
   56|      0|        if secondTest {
   57|      0|            XCTAssert(!read)
   58|      0|        } else {
   59|      0|           XCTAssert(read)
   60|      0|        }
   61|      0|        
   62|      0|    }
   63|       |    
   64|      0|    func setReviewVisibility(hasReviews: Bool) {
   65|      0|        if secondTest {
   66|      0|            XCTAssert(!hasReviews)
   67|      0|        } else {
   68|      0|            XCTAssert(hasReviews)
   69|      0|        }
   70|      0|    }
   71|       |    
   72|      0|    func resetTestCheck() {
   73|      0|        secondTest = false
   74|      0|        thirdTest = false
   75|      0|        ratingTest = false
   76|      0|        ratingTest2 = false
   77|      0|    }
   78|       |
   79|       |}
   80|       |
   81|       |class MockDetailRepository: DetailRepositoring {
   82|       |    weak var vModel: DetailViewModelling?
   83|       |    
   84|      0|    func setViewModel(vModel: DetailViewModelling) {
   85|      0|        self.vModel = vModel
   86|      0|    }
   87|       |    
   88|       |    var secondTest = false
   89|       |    
   90|      0|    func checkIfInList() {
   91|      0|        let books: [String] = ["1", "2", "5", "123"]
   92|      0|        let reviews: [String] = ["11", "22", "55", "123123"]
   93|      0|        vModel?.compareList(books, reviews)
   94|      0|    }
   95|       |    
   96|      0|    func getBookID(reviewDetails: String) {
   97|      0|        var similarBooksArray: [SimilarBook] = []
   98|      0|        similarBooksArray.append(SimilarBook(bookId: "1", imageLink: "pic.image.com", title: "Test", author: "Test Author", bookLink: "testbook.web.com", pages: "123", isbn: "987654321"))
   99|      0|        similarBooksArray.append(SimilarBook(bookId: "3", imageLink: "pic2.image.com", title: "Test2", author: "Test Author", bookLink: "testbook2.web.com", pages: "125", isbn: "987657321"))
  100|      0|        
  101|      0|        if reviewDetails == "Read Book Information" {
  102|      0|            vModel?.setBookID("123")
  103|      0|            let testExtraDetailsModel = ExtraDetailsModel(avgRating: "4", numReviews: "800000", yearPublished: "1999", publisher: "Test Publihser", details: "Some synopsis", similarBooks: similarBooksArray)
  104|      0|            vModel?.setRemainingDetails(model: testExtraDetailsModel)
  105|      0|        } else if reviewDetails == "Unread Book Information" {
  106|      0|            vModel?.setBookID("987")
  107|      0|             let testExtraDetailsModel = ExtraDetailsModel(avgRating: "4", numReviews: "900", yearPublished: "1999", publisher: "Test Publihser", details: "Some synopsis", similarBooks: similarBooksArray)
  108|      0|            vModel?.setRemainingDetails(model: testExtraDetailsModel)
  109|      0|        } else if reviewDetails == "Popular Book Information" {
  110|      0|            let testExtraDetailsModel = ExtraDetailsModel(avgRating: "5", numReviews: "2000000", yearPublished: "2009", publisher: "Famous Test Publihser", details: "Some synopsis", similarBooks: similarBooksArray)
  111|      0|            vModel?.setRemainingDetails(model: testExtraDetailsModel)
  112|      0|        } else if reviewDetails == "Failure Book Information" {
  113|      0|            let testExtraDetailsModel = ExtraDetailsModel(avgRating: "5", numReviews: "500k Ratings", yearPublished: "2009", publisher: "Famous Test Publihser", details: "Some synopsis", similarBooks: similarBooksArray)
  114|      0|            vModel?.setRemainingDetails(model: testExtraDetailsModel)
  115|      0|        }
  116|      0|        
  117|      0|    }
  118|       |    
  119|      0|    func postToShelf(params: [String: Any]) {
  120|      0|        if params["remove"] != nil {
  121|      0|            vModel?.setBookmarkStatus()
  122|      0|        } else {
  123|      0|            vModel?.setBookmarkStatus()
  124|      0|        }
  125|      0|    }
  126|       |    
  127|      0|    func checkReviews(_ reviewData: String) {
  128|      0|        if reviewData == "Book Information" {
  129|      0|            vModel?.setReviewVisibility(hasReviews: true)
  130|      0|            var testReviewModel = ReviewModel(reviewerImageLink: "pic.image.com", reviewerName: "NY Times", rating: "3", review: "Great Book")
  131|      0|            if secondTest {
  132|      0|                testReviewModel = ReviewModel(reviewerImageLink: "", reviewerName: "Guardian", rating: "3", review: "Great Book")
  133|      0|            }
  134|      0|            vModel?.setFirstReview(review: testReviewModel)
  135|      0|        } else if reviewData == "Obscure Book Information" {
  136|      0|            vModel?.setReviewVisibility(hasReviews: false)
  137|      0|        }
  138|      0|    }
  139|       |    
  140|      0|    func getUserId() -> String {
  141|      0|        return "101"
  142|      0|    }
  143|       |    
  144|      0|    func resetTestCheck() {
  145|      0|        secondTest = false
  146|      0|    }
  147|       |    
  148|       |}
  149|       |
  150|       |class DetailViewModelTests: XCTestCase {
  151|       |
  152|       |    var serviceUnderTest: DetailViewModel?
  153|       |    var mockRepo = MockDetailRepository()
  154|       |    var mockView = MockDetailView()
  155|       |    
  156|      0|    override func setUp() {
  157|      0|        // Put setup code here. This method is called before the invocation of each test method in the class.
  158|      0|    }
  159|       |
  160|      0|    override func tearDown() {
  161|      0|       mockView.resetTestCheck()
  162|      0|        mockRepo.resetTestCheck()
  163|      0|    }
  164|       |
  165|      0|    func testCheckingWhetherBookIsOnUsersBookShelfSetsStatusAsRead() {
  166|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  167|      0|        serviceUnderTest?.checkIfInList("Read Book Information")
  168|      0|    }
  169|       |    
  170|      0|    func testCheckingWhetherBookIsOnUsersBookShelfSetsStatusAsUnread() {
  171|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  172|      0|        mockView.secondTest = true
  173|      0|        serviceUnderTest?.checkIfInList("Unread Book Information")
  174|      0|    }
  175|       |
  176|      0|    func testCheckingWhetherABookHasCriticReviewsAndShowsReviewWithOwnImage() {
  177|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  178|      0|        serviceUnderTest?.checkReviews("Book Information")
  179|      0|    }
  180|       |    
  181|      0|    func testCheckingWhetherABookHasCriticReviewsAndShowsReviewWithDefaultImage() {
  182|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  183|      0|        mockRepo.secondTest = true
  184|      0|        mockView.thirdTest = true
  185|      0|        serviceUnderTest?.checkReviews("Book Information")
  186|      0|    }
  187|       |
  188|      0|    func testCheckingWhetherABookHasCriticReviewsHidesTheButtonIfItDoesnt() {
  189|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  190|      0|        mockView.secondTest = true
  191|      0|        serviceUnderTest?.checkReviews("Obscure Book Information")
  192|      0|    }
  193|       |
  194|      0|    func testAddingABookToShelfAlsoChecksBookmarkButton() {
  195|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  196|      0|        serviceUnderTest?.inList = false
  197|      0|        serviceUnderTest?.bookId = "123"
  198|      0|        serviceUnderTest?.modifyBookshelf()
  199|      0|    }
  200|       |
  201|      0|    func testRemovingABookFromShelfAlsoUnchecksBookmarkButton() {
  202|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  203|      0|        serviceUnderTest?.inList = true
  204|      0|        serviceUnderTest?.bookId = "123"
  205|      0|        mockView.secondTest = true
  206|      0|        serviceUnderTest?.modifyBookshelf()
  207|      0|    }
  208|       |    
  209|      0|    func testGettingModelFetchesUserIdAndConstructsModel() {
  210|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  211|      0|        serviceUnderTest?.reviewId = "123"
  212|      0|        serviceUnderTest?.bookId = "987"
  213|      0|        let model = serviceUnderTest?.getModel()
  214|      0|        XCTAssert(model?.bookId == "987")
  215|      0|        XCTAssert(model?.reviewId == "123")
  216|      0|        XCTAssert(model?.userId == "101")
  217|      0|    }
  218|       |    
  219|      0|    func testNetworkErrorShowsErrorAlert() {
  220|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  221|      0|        mockView.errorTestNumber = 1
  222|      0|        serviceUnderTest?.errorAlert("error1")
  223|      0|    }
  224|       |    
  225|      0|    func testErrorShownOnBeingUnableToModifyShelf() {
  226|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  227|      0|        mockView.errorTestNumber = 2
  228|      0|        serviceUnderTest?.errorAlert("error2")
  229|      0|    }
  230|       |    
  231|      0|    func testErrorShownOnNotBeingAbleToObtainValidBookId() {
  232|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  233|      0|        mockView.errorTestNumber = 3
  234|      0|        serviceUnderTest?.inList = false
  235|      0|        serviceUnderTest?.bookId = nil
  236|      0|        serviceUnderTest?.modifyBookshelf()
  237|      0|    }
  238|       |    
  239|      0|    func testErrorShownOnMissingOauthToken() {
  240|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  241|      0|        mockView.errorTestNumber = 4
  242|      0|        serviceUnderTest?.errorAlert("error4")
  243|      0|    }
  244|       |    
  245|      0|    func testBookWithLargeNumberOfReviewGetsFormattedCorrectlyToThousand() {
  246|      0|         serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  247|      0|        mockView.ratingTest = true
  248|      0|        serviceUnderTest?.checkIfInList("Read Book Information")
  249|      0|    }
  250|       |    
  251|      0|    func testBookWithLargeNumberOfReviewGetsFormattedCorrectlyToMillion() {
  252|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  253|      0|        mockView.ratingTest2 = true
  254|      0|        serviceUnderTest?.checkIfInList("Popular Book Information")
  255|      0|    }
  256|       |    
  257|      0|    func testWrongTypeOfDataShowsError() {
  258|      0|        serviceUnderTest = DetailViewModel(view: mockView, repo: mockRepo)
  259|      0|        mockView.errorTestNumber = 5
  260|      0|        serviceUnderTest?.checkIfInList("Failure Book Information")
  261|      0|    }
  262|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/MyReviewViewModelTests.swift:
    1|       |//
    2|       |//  MyReviewViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/11.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import BookWyrm
   11|       |
   12|       |class MockMyReviewRepository: MyReviewRepositoring {
   13|       |    weak var vModel: MyReviewViewModelling?
   14|       |    
   15|      0|    func getReview(reviewId: String) {
   16|      0|        if reviewId == "123" {
   17|      0|            vModel?.setReview("Good Book", "4")
   18|      0|        }
   19|      0|    }
   20|       |    
   21|      0|    func editReview(params: [String: Any], _ reviewId: String) {
   22|      0|        let review = params["review[review]"] as! String
   23|      0|        let rating = params["review[rating]"] as! Double
   24|      0|        
   25|      0|        XCTAssert(review == "Ending was terrible" && rating == 2 && reviewId == "987")
   26|      0|        vModel?.closePage()
   27|      0|    }
   28|       |    
   29|      0|    func postReview(params: [String: Any]) {
   30|      0|        let bookId = params["book_id"] as! String
   31|      0|        let review = params["review[review]"] as! String
   32|      0|        let rating = params["review[rating]"] as! Double
   33|      0|        
   34|      0|        XCTAssert(bookId == "123" && review == "Decent Book" && rating == 3)
   35|      0|        vModel?.closePage()
   36|      0|    }
   37|       |    
   38|      0|    func setViewModel(vModel: MyReviewViewModelling) {
   39|      0|        self.vModel = vModel
   40|      0|    }
   41|       |}
   42|       |
   43|       |class MockMyReviewView: MyReviewViewControllable {
   44|       |    var errorTest = 0
   45|       |    
   46|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   47|      0|        
   48|      0|        if errorTest == 1 {
   49|      0|            XCTAssert(title == "Network Error" && error == "Error fetching results. Please check your network conenction and try again")
   50|      0|        } else if errorTest == 2 {
   51|      0|            XCTAssert(title == "Network Error" && error == "Error posting your review. Please check your network connection and try again")
   52|      0|        } else if errorTest == 3 {
   53|      0|            XCTAssert(title == "Review not found" && error == "No review found. You may have selected an alternative version of the book you reviewed")
   54|      0|        }
   55|      0|    }
   56|       |    
   57|       |    var counter = 0
   58|       |    
   59|      0|    func setReviewInfo(_ review: String, _ rating: Double) {
   60|      0|        XCTAssert(review == "Good Book" && rating == 4)
   61|      0|    }
   62|       |    
   63|      0|    func returnToPrevScreen() {
   64|      0|        counter += 1
   65|      0|    }
   66|       |    
   67|      0|    func verify() {
   68|      0|        XCTAssert(counter == 1)
   69|      0|    }
   70|       |    
   71|      0|    func resetCounter() {
   72|      0|        counter = 0
   73|      0|    }
   74|       |}
   75|       |
   76|       |class MyReviewViewModelTests: XCTestCase {
   77|       |    
   78|       |    var serviceUnderTest: MyReviewViewModel?
   79|       |    var mockRepo = MockMyReviewRepository()
   80|       |    var mockView = MockMyReviewView()
   81|       |
   82|      0|    override func setUp() {
   83|      0|        
   84|      0|    }
   85|       |
   86|      0|    override func tearDown() {
   87|      0|        mockView.resetCounter()
   88|      0|    }
   89|       |    
   90|      0|    func testGettingAndSettingExistingReview() {
   91|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
   92|      0|        serviceUnderTest?.getReview(reviewId: "123")
   93|      0|    }
   94|       |    
   95|      0|    func testPostingNewReview() {
   96|      0|        let testModel = DetailsModel(userId: "1", bookId: "123", reviewId: nil)
   97|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
   98|      0|        serviceUnderTest?.postReview("Decent Book", 3, testModel)
   99|      0|        mockView.verify()
  100|      0|    }
  101|       |    
  102|      0|    func testEditingExistingReview() {
  103|      0|        let testModel = DetailsModel(userId: "1", bookId: "1234", reviewId: "987")
  104|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
  105|      0|        serviceUnderTest?.postReview("Ending was terrible", 2, testModel)
  106|      0|        mockView.verify()
  107|      0|    }
  108|       |    
  109|      0|    func testErrorMessageShownOnBadNetworkWhenFetchingReview() {
  110|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
  111|      0|        mockView.errorTest = 1
  112|      0|        serviceUnderTest?.errorBuilder("error1")
  113|      0|    }
  114|       |    
  115|      0|    func testErrorMessageShownOnBadNetworkWhenPostingReview() {
  116|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
  117|      0|        mockView.errorTest = 2
  118|      0|        serviceUnderTest?.errorBuilder("error2")
  119|      0|    }
  120|       |
  121|      0|    func testErrorMessageShownOnInvalidFetchedReview() {
  122|      0|        serviceUnderTest = MyReviewViewModel(view: mockView, repo: mockRepo)
  123|      0|        mockView.errorTest = 3
  124|      0|        serviceUnderTest?.errorBuilder("error3")
  125|      0|    }
  126|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/ProfileViewModelTests.swift:
    1|       |//
    2|       |//  ProfileViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/04/29.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import BookWyrm
   11|       |
   12|       |class MockProfileView: ProfileViewControllable {
   13|       |    
   14|       |    var error: String = ""
   15|       |    var counter = 0
   16|       |    
   17|      0|    func setUserInfo(userProfile: ProfileModel) {
   18|      0|        XCTAssert(userProfile.joinDate == "Joined: 01/1999")
   19|      0|        counter += 1
   20|      0|    }
   21|       |    
   22|      0|    func resetCounter() {
   23|      0|        counter = 0
   24|      0|    }
   25|       |    
   26|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   27|      0|        self.error = error
   28|      0|    }
   29|       |    
   30|       |}
   31|       |
   32|       |class MockProfileRepository: ProfileRepositoring {
   33|       |    
   34|       |    var counter = 0
   35|       |     weak var vModel: ProfileViewModelling?
   36|       |    
   37|      0|    func fetchUserInfo() {
   38|      0|        counter += 1
   39|      0|        let testModel = ProfileModel(name: "Zaheer", profileImageLink: "image.com", joinDate: "01/1999", numFriends: "1", numGroups: "3", numReviews: "11")
   40|      0|        vModel?.setUserInfo(userProfile: testModel)
   41|      0|    }
   42|       |    
   43|      0|    func setViewModel(vModel: ProfileViewModelling) {
   44|      0|        self.vModel = vModel
   45|      0|    }
   46|       |    
   47|      0|    func resetCounter() {
   48|      0|        counter = 0
   49|      0|    }
   50|       |    
   51|       |}
   52|       |
   53|       |class ProfileViewModelTests: XCTestCase {
   54|       |    
   55|       |    var serviceUnderTest: ProfileViewModel?
   56|       |    var mockRepo = MockProfileRepository()
   57|       |    var mockView = MockProfileView()
   58|       |
   59|      0|    override func setUp() {
   60|      0|
   61|      0|    }
   62|       |
   63|      0|    override func tearDown() {
   64|      0|        mockRepo.resetCounter()
   65|      0|        mockView.resetCounter()
   66|      0|        mockView.error = ""
   67|      0|    }
   68|       |    
   69|      0|    func testGettingUserInfoCallsRepo() {
   70|      0|        serviceUnderTest = ProfileViewModel(view: mockView, repo: mockRepo)
   71|      0|        serviceUnderTest?.getUserInfo()
   72|      0|        XCTAssert(mockRepo.counter == 1)
   73|      0|    }
   74|       |    
   75|      0|    func testRequestingResultsAlsoSetsInformationInView() {
   76|      0|        serviceUnderTest = ProfileViewModel(view: mockView, repo: mockRepo)
   77|      0|        serviceUnderTest?.getUserInfo()
   78|      0|        XCTAssert(mockView.counter == 1)
   79|      0|    }
   80|       |    
   81|      0|    func testUserDataNotFoundShowsError() {
   82|      0|         serviceUnderTest = ProfileViewModel(view: mockView, repo: mockRepo)
   83|      0|         serviceUnderTest?.errorAlert("error1")
   84|      0|         XCTAssert(mockView.error == "No user profile information found. Please try again")
   85|      0|    }
   86|       |    
   87|      0|    func testErrorParsingUserDataShowsError() {
   88|      0|        serviceUnderTest = ProfileViewModel(view: mockView, repo: mockRepo)
   89|      0|        serviceUnderTest?.errorAlert("error2")
   90|      0|        XCTAssert(mockView.error == "Unable to parse user information")
   91|      0|    }
   92|       |
   93|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/RecommendationsViewModelTests.swift:
    1|       |//
    2|       |//  RecommendationsViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/25.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import BookWyrm
   11|       |
   12|       |class MockRecommendationsView: RecommendationsControllable {
   13|       |    
   14|       |    var secondTest = false
   15|       |    var counter = 0
   16|       |    
   17|      0|    func setBooksModel(_ books: [RecommendedBooksModel]) {
   18|      0|        XCTAssert(books[0].title == "Test Book")
   19|      0|    }
   20|       |    
   21|      0|    func setPopularBooksModel(_ books: [RecommendedBooksModel]) {
   22|      0|        XCTAssert(books[0].title == "Test Book 2")
   23|      0|    }
   24|       |    
   25|      0|    func moveToDetailsPage(_ bookInfo: SearchModel) {
   26|      0|        XCTAssert(bookInfo.authors == "By: Test Author")
   27|      0|    }
   28|       |    
   29|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   30|      0|        if !secondTest {
   31|      0|            XCTAssert(error == "Please check your internet connection and try again" && title == "Network Error")
   32|      0|        } else {
   33|      0|            XCTAssert(error == "Unable to obtain login token. Please restart the app" && title == "Authentication Error")
   34|      0|        }
   35|      0|    }
   36|       |    
   37|      0|    func displayNoRecommendations() {
   38|      0|        counter += 1
   39|      0|    }
   40|       |}
   41|       |
   42|       |class MockRecommendationsRepository: RecommendationsRepositoring {
   43|       |    weak var vModel: RecommendationsViewModelling?
   44|       |    var secondTest = false
   45|       |    
   46|      0|    func setViewModel(vModel: RecommendationsViewModelling) {
   47|      0|        self.vModel = vModel
   48|      0|    }
   49|       |    
   50|      0|    func getBookList() {
   51|      0|        if !secondTest {
   52|      0|            var fakeModel: [RecommendationsModel] = []
   53|      0|            fakeModel.append(RecommendationsModel(bookName: "Harry Potter", bookRating: 4))
   54|      0|            fakeModel.append(RecommendationsModel(bookName: "Percy Jackson", bookRating: 3))
   55|      0|            vModel?.filterBooks(bookList: fakeModel)
   56|      0|        } else {
   57|      0|            var fakeModel: [RecommendationsModel] = []
   58|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 1", bookRating: 3))
   59|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 2", bookRating: 4))
   60|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 3", bookRating: 4))
   61|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 4", bookRating: 1))
   62|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 5", bookRating: 5))
   63|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 6", bookRating: 4))
   64|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 7", bookRating: 5))
   65|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 8", bookRating: 2))
   66|      0|            fakeModel.append(RecommendationsModel(bookName: "Test Book 9", bookRating: 5))
   67|      0|            vModel?.filterBooks(bookList: fakeModel)
   68|      0|        }
   69|      0|    }
   70|       |    
   71|      0|    func getRecommendations(with list: [String]) {
   72|      0|        if !secondTest {
   73|      0|            XCTAssert(list.count == 1)
   74|      0|        } else {
   75|      0|            XCTAssert(list.count == 5)
   76|      0|        }
   77|      0|        var books: [RecommendedBooksModel] = []
   78|      0|        books.append(RecommendedBooksModel(title: "Test Book", authors: "Test Author", largeImageUrl: "fakeurl.com", bookId: "123", isbn: "98765", description: "Fake Description of Book", publishedDay: "01", publishedMonth: "02", publishedYear: "2003", reviewInfo: "98765", webLink: "fakelink.co.za", pageNumbers: "99"))
   79|      0|        vModel?.setBooksModel(books)
   80|      0|        
   81|      0|        var popularBooks: [RecommendedBooksModel] = []
   82|      0|        popularBooks.append(RecommendedBooksModel(title: "Test Book 2", authors: "Test Author 2", largeImageUrl: "fakeurl2.com", bookId: "1234", isbn: "987654", description: "Fake Description of Book", publishedDay: "01", publishedMonth: "03", publishedYear: "1963", reviewInfo: "987654", webLink: "fakelink2.co.za", pageNumbers: "100"))
   83|      0|        vModel?.sendPopularBooksList(popularBooks)
   84|      0|    }
   85|       |}
   86|       |
   87|       |class RecommendationsViewModelTests: XCTestCase {
   88|       |    
   89|       |    var serviceUnderTest: RecommendationsViewModel?
   90|       |    var mockRepo = MockRecommendationsRepository()
   91|       |    var mockView = MockRecommendationsView()
   92|       |
   93|      0|    override func setUp() {
   94|      0|        // Put setup code here. This method is called before the invocation of each test method in the class.
   95|      0|    }
   96|       |
   97|      0|    override func tearDown() {
   98|      0|        mockRepo.secondTest = false
   99|      0|        mockView.counter = 0
  100|      0|    }
  101|       |
  102|      0|    func testFetchingBookListWithFewHighRatedBooksSetsBookArrays() {
  103|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  104|      0|        serviceUnderTest?.fetchBookList()
  105|      0|    }
  106|       |    
  107|      0|    func testFetchingBookListWithManyHighRatedBooksRandomlyPicksBookAndSetsBookArrays() {
  108|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  109|      0|        mockRepo.secondTest = true
  110|      0|        serviceUnderTest?.fetchBookList()
  111|      0|    }
  112|       |    
  113|      0|    func testNetworkErrorDisplaysPopup() {
  114|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  115|      0|        serviceUnderTest?.errorAlert("error1")
  116|      0|    }
  117|       |    
  118|      0|    func testTokenErrorDisplaysPopup() {
  119|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  120|      0|        mockView.secondTest = true
  121|      0|        serviceUnderTest?.errorAlert("error4")
  122|      0|    }
  123|       |    
  124|      0|    func testMovingToDetailsPageModifiesTextLayout() {
  125|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  126|      0|        let model = RecommendedBooksModel(title: "Test Book", authors: "Test Author", largeImageUrl: "fakeurl.com", bookId: "123", isbn: "98765", description: "Fake Description of Book", publishedDay: "01", publishedMonth: "02", publishedYear: "2003", reviewInfo: "98765", webLink: "fakelink.co.za", pageNumbers: "99")
  127|      0|        serviceUnderTest?.setBook(model)
  128|      0|    }
  129|       |    
  130|      0|    func testPersonWithNoBooksGetsShownNoRecommendations() {
  131|      0|        serviceUnderTest = RecommendationsViewModel(view: mockView, repo: mockRepo)
  132|      0|        serviceUnderTest?.errorAlert("error2")
  133|      0|        XCTAssert(mockView.counter == 1)
  134|      0|    }
  135|       |
  136|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/SearchViewModelTests.swift:
    1|       |//
    2|       |//  SearchViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/12.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |import OAuthSwift
   11|       |@testable import BookWyrm
   12|       |
   13|       |class MockSearchRepository: SearchRepositoring {
   14|       |    var counter = 0
   15|       |    
   16|       |    weak var vModel: SearchViewModelling?
   17|       |    
   18|      0|    func search(searchText: String) {
   19|      0|        var testResults: [SearchModel] = []
   20|      0|        testResults.append(SearchModel(title: "Test Book",
   21|      0|                                       authors: "Test Author",
   22|      0|                                       smallImageUrl: "www.smallpics.com",
   23|      0|                                       largeImageUrl: "www.pics.com",
   24|      0|                                       publishedDate: "01-01-2000",
   25|      0|                                       reviewInfo: "Test Book",
   26|      0|                                       isbn: "0123456789101",
   27|      0|                                       pageNumbers: "387",
   28|      0|                                       genres: "Testing, Software",
   29|      0|                                       description: "Test Description",
   30|      0|                                       webLink: "www.testbook.co.za"))
   31|      0|        testResults.append(SearchModel(title: "Test Book 2: More testing",
   32|      0|                                       authors: "Test Author",
   33|      0|                                       smallImageUrl: "www.smallpics.com",
   34|      0|                                       largeImageUrl: "www.pics.com",
   35|      0|                                       publishedDate: "01-02-2002",
   36|      0|                                       reviewInfo: "Test Book 2",
   37|      0|                                       isbn: "0123456789101",
   38|      0|                                       pageNumbers: "500",
   39|      0|                                       genres: "Testing, Software",
   40|      0|                                       description: "A sequel to Test Description",
   41|      0|                                       webLink: "www.testbook2.co.za"))
   42|      0|        
   43|      0|        vModel?.setResults(testResults)
   44|      0|    }
   45|       |    
   46|      0|    func storedDetailsCheck() {
   47|      0|        counter += 1
   48|      0|    }
   49|       |    
   50|      0|    func setViewModel(vModel: SearchViewModelling) {
   51|      0|        self.vModel = vModel
   52|      0|    }
   53|       |    
   54|      0|    func reset() {
   55|      0|        counter = 0
   56|      0|    }
   57|       |    
   58|      0|    func verifyNotReached() {
   59|      0|        XCTAssert(counter == 1)
   60|      0|    }
   61|       |}
   62|       |
   63|       |class MockSearchView: SearchResultsTableViewControllable {
   64|       |    var testNumber = 0
   65|       |    
   66|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   67|      0|        if testNumber == 1 {
   68|      0|            XCTAssert(title == "Network Error" && error == "Error fetching results. Please check your network connection and try again")
   69|      0|        } else if testNumber == 2 {
   70|      0|            XCTAssert(title == "Authentication Error" && error == "Error getting token")
   71|      0|        }
   72|      0|    }
   73|       |    
   74|      0|    func setResults(results: [SearchModel]) {
   75|      0|        XCTAssert(results[0].title == "Test Book")
   76|      0|        //Alternative to counter
   77|      0|    }
   78|       |    
   79|      0|    func moveToDetailsPage(bookModel: SearchModel) {
   80|      0|        XCTAssert(bookModel.authors == "By: Test Author")
   81|      0|        XCTAssert(bookModel.publishedDate == "Date Published: 01-01-2000")
   82|      0|        XCTAssert(bookModel.pageNumbers == "Pages: 387")
   83|      0|        XCTAssert(bookModel.isbn == "ISBN_13: 0123456789101")
   84|      0|        XCTAssert(bookModel.genres == "Genres: Testing, Software" || bookModel.genres == "Genres: None Found")
   85|      0|    }
   86|       |}
   87|       |
   88|       |class SearchViewModelTests: XCTestCase {
   89|       |    var serviceUnderTest: SearchViewModel?
   90|       |    var mockRepo = MockSearchRepository()
   91|       |    var mockView = MockSearchView()
   92|       |
   93|      0|    override func setUp() {
   94|      0|        // Put setup code here. This method is called before the invocation of each test method in the class.
   95|      0|    }
   96|       |
   97|      0|    override func tearDown() {
   98|      0|        mockRepo.reset()
   99|      0|    }
  100|       |    
  101|      0|    func testResultCountIsCorrect() {
  102|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  103|      0|        var testResults: [SearchModel] = []
  104|      0|        testResults.append(SearchModel(title: "Test Book",
  105|      0|                                       authors: "Test Author",
  106|      0|                                       smallImageUrl: "www.smallpics.com",
  107|      0|                                       largeImageUrl: "www.pics.com",
  108|      0|                                       publishedDate: "01-01-2000",
  109|      0|                                       reviewInfo: "Test Book",
  110|      0|                                       isbn: "0123456789101",
  111|      0|                                       pageNumbers: "387",
  112|      0|                                       genres: "Testing, Software",
  113|      0|                                       description: "Test Description",
  114|      0|                                       webLink: "www.testbook.co.za"))
  115|      0|        testResults.append(SearchModel(title: "Test Book 2: More testing",
  116|      0|                                       authors: "Test Author",
  117|      0|                                       smallImageUrl: "www.smallpics.com",
  118|      0|                                       largeImageUrl: "www.pics.com",
  119|      0|                                       publishedDate: "01-02-2002",
  120|      0|                                       reviewInfo: "Test Book 2",
  121|      0|                                       isbn: "0123456789101",
  122|      0|                                       pageNumbers: "500",
  123|      0|                                       genres: "Testing, Software",
  124|      0|                                       description: "A sequel to Test Description",
  125|      0|                                       webLink: "www.testbook2.co.za"))
  126|      0|        
  127|      0|        XCTAssert(serviceUnderTest?.countResults(testResults) == 2)
  128|      0|    }
  129|       |    
  130|      0|    func testSearchOnlyExecutesAfterSpecifiedTime() {
  131|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  132|      0|        serviceUnderTest?.searchText(textToSearch: "test search")
  133|      0|        mockRepo.verifyNotReached()
  134|      0|    }
  135|       |    
  136|      0|    func testSearchingSetsResults() {
  137|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  138|      0|        serviceUnderTest?.previousRun = Date() - 2
  139|      0|        serviceUnderTest?.searchText(textToSearch: "test search")
  140|      0|    }
  141|       |    
  142|       |    //'Error out of range' test where?
  143|      0|    func testGettingDetailsForCellModifiesContent() {
  144|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  145|      0|        let fakeModel = SearchModel(title: "Test Book",
  146|      0|                                    authors: "Test Author",
  147|      0|                                    smallImageUrl: "www.smallpics.com",
  148|      0|                                    largeImageUrl: "www.pics.com",
  149|      0|                                    publishedDate: "01-01-2000",
  150|      0|                                    reviewInfo: "Test Book",
  151|      0|                                    isbn: "0123456789101",
  152|      0|                                    pageNumbers: "387",
  153|      0|                                    genres: "Testing, Software",
  154|      0|                                    description: "Test Description",
  155|      0|                                    webLink: "www.testbook.co.za")
  156|      0|        let newModel = serviceUnderTest?.detailsForCell(result: fakeModel)
  157|      0|        XCTAssert(newModel?.authors == "By: Test Author")
  158|      0|    }
  159|       |    
  160|      0|    func testModifyingDataAndMovingToDetailsPage() {
  161|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  162|      0|        let fakeModel = SearchModel(title: "Test Book",
  163|      0|                                    authors: "Test Author",
  164|      0|                                    smallImageUrl: "www.smallpics.com",
  165|      0|                                    largeImageUrl: "www.pics.com",
  166|      0|                                    publishedDate: "01-01-2000",
  167|      0|                                    reviewInfo: "Test Book",
  168|      0|                                    isbn: "0123456789101",
  169|      0|                                    pageNumbers: "387",
  170|      0|                                    genres: "Testing, Software",
  171|      0|                                    description: "Test Description",
  172|      0|                                    webLink: "www.testbook.co.za")
  173|      0|        serviceUnderTest?.detailsForPage(result: fakeModel)
  174|      0|    }
  175|       |    
  176|      0|    func testModifyingDataAndMovingToDetailsPageWithNoGenres() {
  177|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  178|      0|        let fakeModel = SearchModel(title: "Test Book",
  179|      0|                                    authors: "Test Author",
  180|      0|                                    smallImageUrl: "www.smallpics.com",
  181|      0|                                    largeImageUrl: "www.pics.com",
  182|      0|                                    publishedDate: "01-01-2000",
  183|      0|                                    reviewInfo: "Test Book",
  184|      0|                                    isbn: "0123456789101",
  185|      0|                                    pageNumbers: "387",
  186|      0|                                    genres: nil,
  187|      0|                                    description: "Test Description",
  188|      0|                                    webLink: "www.testbook.co.za")
  189|      0|        serviceUnderTest?.detailsForPage(result: fakeModel)
  190|      0|    }
  191|       |    
  192|       |    //Add nil view check here too
  193|      0|    func testGettingViewInstanceCorrectly() {
  194|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  195|      0|        XCTAssert(serviceUnderTest?.fetchView() != nil)
  196|      0|    }
  197|       |    
  198|      0|    func testGettingViewInstanceWithNilValueCreatesNewInstance() {
  199|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  200|      0|        serviceUnderTest?.view = nil
  201|      0|        XCTAssert(serviceUnderTest?.fetchView() != nil)
  202|      0|    }
  203|       |    
  204|      0|    func testErrorMessageShownOnNetworkError() {
  205|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  206|      0|        mockView.testNumber = 1
  207|      0|        serviceUnderTest?.errorBuilder("error1")
  208|      0|    }
  209|       |    
  210|      0|    func testErrorMessageShownOnOauthError() {
  211|      0|        serviceUnderTest = SearchViewModel(view: mockView, repo: mockRepo)
  212|      0|        mockView.testNumber = 2
  213|      0|        serviceUnderTest?.errorBuilder("Error getting token")
  214|      0|    }
  215|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/BookWyrm/BookWyrmTests/ViewModelTests/ShelfViewModelTests.swift:
    1|       |//
    2|       |//  ShelfViewModelTests.swift
    3|       |//  BookWyrmTests
    4|       |//
    5|       |//  Created by Zaheer Moola on 2019/03/11.
    6|       |//  Copyright © 2019 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import BookWyrm
   11|       |@testable import ShelfView
   12|       |
   13|       |class MockShelfView: PlainShelfControllable {
   14|       |    var testNumber = 0
   15|       |    
   16|      0|    func displayErrorPopup(_ error: String, _ title: String) {
   17|      0|        switch testNumber {
   18|      0|        case 1:
   19|      0|            XCTAssert(error == "Error fetching token credentials. Please try restarting the app" && title == "Credential Error")
   20|      0|        case 2:
   21|      0|            XCTAssert(error == "Error fetching book list. Please check your network connection and try again" && title == "Network Error")
   22|      0|        case 3:
   23|      0|            XCTAssert(error == "No books found. Possible Server Error" && title == "Empty Results")
   24|      0|        case 4:
   25|      0|            XCTAssert(error == "No book found for book in shelf. Check the version that you may have bookmarked" && title == "No book found")
   26|      0|        default:
   27|      0|            //Should not have been called otherwise, test failed
   28|      0|            XCTAssert(false)
   29|      0|        }
   30|      0|    }
   31|       |    
   32|      0|    func reloadData(_ bookModel: [BookModel]) {
   33|      0|        XCTAssert(bookModel[0].bookId == "123" && bookModel[1].bookTitle == "Test Book: The Sequel")
   34|      0|    }
   35|       |    
   36|      0|    func moveToDetailsPage(_ bookInfo: SearchModel) {
   37|      0|        XCTAssert(bookInfo.publishedDate == "Date Published: 01-03-1999")
   38|      0|        XCTAssert(bookInfo.authors == "By: Test Author")
   39|      0|        XCTAssert(bookInfo.isbn == "ISBN_13: 0123456789101")
   40|      0|        XCTAssert(bookInfo.pageNumbers == "Pages: 22")
   41|      0|    }
   42|       |}
   43|       |
   44|       |class MockShelfRepository: ShelfRepositoring {
   45|       |    weak var vModel: ShelfViewModelling?
   46|       |    
   47|      0|    func searchBook(bookId: String) {
   48|      0|        let model =  ShelfModel(title: "Test Book",
   49|      0|                                authors: "Test Author",
   50|      0|                                largeImageUrl: "www.pics.com",
   51|      0|                                publishedDay: "01",
   52|      0|                                publishedMonth: "03",
   53|      0|                                publishedYear: "1999",
   54|      0|                                reviewInfo: "0123456789101",
   55|      0|                                isbn: "0123456789101",
   56|      0|                                pageNumbers: "22",
   57|      0|                                description: "Test Description",
   58|      0|                                webLink: "www.testbook.co.za")
   59|      0|        vModel?.setBook(model)
   60|      0|    }
   61|       |    
   62|      0|    func getBookModel() {
   63|      0|        var books: [BookModel] = []
   64|      0|        books.append(BookModel(bookCoverSource: "www.pic.com", bookId: "123", bookTitle: "Test Book"))
   65|      0|        books.append(BookModel(bookCoverSource: "www.pic2.com", bookId: "124", bookTitle: "Test Book: The Sequel"))
   66|      0|        
   67|      0|        vModel?.setModel(books: books)
   68|      0|    }
   69|       |    
   70|      0|    func setViewModel(vModel: ShelfViewModelling) {
   71|      0|        self.vModel = vModel
   72|      0|    }
   73|       |    
   74|       |}
   75|       |
   76|       |class ShelfViewModelTests: XCTestCase {
   77|       |
   78|       |    var serviceUnderTest: ShelfViewModel?
   79|       |    var mockRepo = MockShelfRepository()
   80|       |    var mockView = MockShelfView()
   81|       |    
   82|      0|    func testGettingModelAndReloadingBookShelf() {
   83|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
   84|      0|        _ = serviceUnderTest?.getModel()
   85|      0|    }
   86|       |    
   87|      0|    func testGettingBookDetailsAndSettingIt() {
   88|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
   89|      0|        serviceUnderTest?.getBook("123")
   90|      0|    }
   91|       |    
   92|      0|    func testShowingErrorOnMissingSavedCredentials() {
   93|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
   94|      0|        mockView.testNumber = 1
   95|      0|        serviceUnderTest?.errorBuilder("error1")
   96|      0|    }
   97|       |    
   98|      0|    func testShowingErrorOnBadResultsFromNetworkError() {
   99|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
  100|      0|        mockView.testNumber = 2
  101|      0|        serviceUnderTest?.errorBuilder("error2")
  102|      0|    }
  103|       |    
  104|      0|    func testShowingErrorOnEmptyResultsFromServerError() {
  105|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
  106|      0|        mockView.testNumber = 3
  107|      0|        serviceUnderTest?.errorBuilder("error3")
  108|      0|    }
  109|       |
  110|      0|    func testShowingErrorOnEmptyBookFromApiMismatchError() {
  111|      0|        serviceUnderTest = ShelfViewModel(view: mockView, repo: mockRepo)
  112|      0|        mockView.testNumber = 4
  113|      0|        serviceUnderTest?.errorBuilder("error4")
  114|      0|    }
  115|       |
  116|       |}

