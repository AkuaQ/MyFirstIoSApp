    1|       |/// Copyright (c) 2020 Razeware LLC
    2|       |/// 
    3|       |/// Permission is hereby granted, free of charge, to any person obtaining a copy
    4|       |/// of this software and associated documentation files (the "Software"), to deal
    5|       |/// in the Software without restriction, including without limitation the rights
    6|       |/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    7|       |/// copies of the Software, and to permit persons to whom the Software is
    8|       |/// furnished to do so, subject to the following conditions:
    9|       |/// 
   10|       |/// The above copyright notice and this permission notice shall be included in
   11|       |/// all copies or substantial portions of the Software.
   12|       |/// 
   13|       |/// Notwithstanding the foregoing, you may not use, copy, modify, merge, publish,
   14|       |/// distribute, sublicense, create a derivative work, and/or sell copies of the
   15|       |/// Software in any work that is designed, intended, or marketed for pedagogical or
   16|       |/// instructional purposes related to programming, coding, application development,
   17|       |/// or information technology.  Permission for such use, copying, modification,
   18|       |/// merger, publication, distribution, sublicensing, creation of derivative works,
   19|       |/// or sale is expressly withheld.
   20|       |/// 
   21|       |/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   22|       |/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   23|       |/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   24|       |/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   25|       |/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   26|       |/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   27|       |/// THE SOFTWARE.
   28|       |
   29|       |import XCTest
   30|       |@testable import HalfTunes
   31|       |
   32|       |class HalfTunesTests: XCTestCase {
   33|       |  
   34|       |  var sut: URLSession!
   35|       |  
   36|      2|  override func setUp() {
   37|      2|    super.setUp()
   38|      2|    sut = URLSession(configuration: .default)
   39|      2|  }
   40|       |  
   41|      0|  func testValidCallToiTunesGetsHTTPStatusCode200() {
   42|      0|    // given
   43|      0|    let url =
   44|      0|      URL(string: "https://itunes.apple.com/search?media=music&entity=song&term=abba")
   45|      0|    // 1
   46|      0|    let promise = expectation(description: "Status code: 200")
   47|      0|    
   48|      0|    // when
   49|      0|    let dataTask = sut.dataTask(with: url!) { data, response, error in
   50|      0|      // then
   51|      0|      if let error = error {
   52|      0|        XCTFail("Error: \(error.localizedDescription)")
   53|      0|        return
   54|      0|      } else if let statusCode = (response as? HTTPURLResponse)?.statusCode {
   55|      0|        if statusCode == 200 {
   56|      0|          // 2
   57|      0|          promise.fulfill()
   58|      0|        } else {
   59|      0|          XCTFail("Status code: \(statusCode)")
   60|      0|        }
   61|      0|      }
   62|      0|    }
   63|      0|    dataTask.resume()
   64|      0|    // 3
   65|      0|    wait(for: [promise], timeout: 5)
   66|      0|  }
   67|       |  
   68|      0|  func testCallToiTunesCompletes() {
   69|      0|    // given
   70|      0|    let url =
   71|      0|      URL(string: "https://itunes.apple.com/search?media=music&entity=song&term=abba")
   72|      0|    let promise = expectation(description: "Completion handler invoked")
   73|      0|    var statusCode: Int?
   74|      0|    var responseError: Error?
   75|      0|    
   76|      0|    // when
   77|      0|    let dataTask = sut.dataTask(with: url!) { data, response, error in
   78|      0|      statusCode = (response as? HTTPURLResponse)?.statusCode
   79|      0|      responseError = error
   80|      0|      promise.fulfill()
   81|      0|    }
   82|      0|    dataTask.resume()
   83|      0|    wait(for: [promise], timeout: 5)
   84|      0|    
   85|      0|    // then
   86|      0|    XCTAssertNil(responseError)
   87|      0|    XCTAssertEqual(statusCode, 200)
   88|      0|  }
   89|       |  
   90|      2|  override func tearDown() {
   91|      2|    sut = nil
   92|      2|    super.tearDown()
   93|      2|  }
   94|       |  
   95|       |}

