/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/MVVM/MVVM/AppDelegate.swift:
    1|       |//
    2|       |//  AppDelegate.swift
    3|       |//  MVVM
    4|       |//
    5|       |//  Created by pjapple on 2020/02/24.
    6|       |//  Copyright © 2020 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |@UIApplicationMain
   12|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   13|       |
   14|       |
   15|       |
   16|      1|    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
   17|      1|        // Override point for customization after application launch.
   18|      1|        return true
   19|      1|    }
   20|       |
   21|       |    // MARK: UISceneSession Lifecycle
   22|       |
   23|      0|    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
   24|      0|        // Called when a new scene session is being created.
   25|      0|        // Use this method to select a configuration to create the new scene with.
   26|      0|        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
   27|      0|    }
   28|       |
   29|      0|    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
   30|      0|        // Called when the user discards a scene session.
   31|      0|        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
   32|      0|        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
   33|      0|    }
   34|       |
   35|       |
   36|       |}
   37|       |

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/MVVM/MVVM/SceneDelegate.swift:
    1|       |//
    2|       |//  SceneDelegate.swift
    3|       |//  MVVM
    4|       |//
    5|       |//  Created by pjapple on 2020/02/24.
    6|       |//  Copyright © 2020 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class SceneDelegate: UIResponder, UIWindowSceneDelegate {
   12|       |
   13|       |    var window: UIWindow?
   14|       |
   15|       |
   16|      1|    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
   17|      1|        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
   18|      1|        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
   19|      1|        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).
   20|      1|        guard let _ = (scene as? UIWindowScene) else { return }
   21|      1|    }
   22|       |
   23|      0|    func sceneDidDisconnect(_ scene: UIScene) {
   24|      0|        // Called as the scene is being released by the system.
   25|      0|        // This occurs shortly after the scene enters the background, or when its session is discarded.
   26|      0|        // Release any resources associated with this scene that can be re-created the next time the scene connects.
   27|      0|        // The scene may re-connect later, as its session was not neccessarily discarded (see `application:didDiscardSceneSessions` instead).
   28|      0|    }
   29|       |
   30|      1|    func sceneDidBecomeActive(_ scene: UIScene) {
   31|      1|        // Called when the scene has moved from an inactive state to an active state.
   32|      1|        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.
   33|      1|    }
   34|       |
   35|      0|    func sceneWillResignActive(_ scene: UIScene) {
   36|      0|        // Called when the scene will move from an active state to an inactive state.
   37|      0|        // This may occur due to temporary interruptions (ex. an incoming phone call).
   38|      0|    }
   39|       |
   40|      1|    func sceneWillEnterForeground(_ scene: UIScene) {
   41|      1|        // Called as the scene transitions from the background to the foreground.
   42|      1|        // Use this method to undo the changes made on entering the background.
   43|      1|    }
   44|       |
   45|      0|    func sceneDidEnterBackground(_ scene: UIScene) {
   46|      0|        // Called as the scene transitions from the foreground to the background.
   47|      0|        // Use this method to save data, release shared resources, and store enough scene-specific state information
   48|      0|        // to restore the scene back to its current state.
   49|      0|    }
   50|       |
   51|       |
   52|       |}
   53|       |

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/MVVM/MVVM/UserRepo.swift:
    1|       |//
    2|       |//  UserRepo.swift
    3|       |//  MVVM
    4|       |//
    5|       |//  Created by pjapple on 2020/02/24.
    6|       |//  Copyright © 2020 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |protocol ModelProtocol : class {
   12|       |    func login(with username: String , and password: String) -> User?
   13|       |}
   14|       |
   15|       |class Model : ModelProtocol {
   16|       |    
   17|      3|    func login(with username: String , and password: String) -> User? {
   18|      3|        
   19|      3|        if (username == "pj" && password == "Password") {
   20|      2|            
   21|      2|            return User(name: "PJ", surname: "Welcome")
   22|      2|        }
   23|      1|        return nil
   24|      3|    }
   25|       |}
   26|       |
   27|       |//DTO : Data transfer Object
   28|       |struct User {
   29|       |    
   30|       |    let name : String
   31|       |    let surname : String
   32|       |}
   33|       |
   34|       |
   35|       |struct ServiceLayer {
   36|       |    
   37|      0|    func getdata () {
   38|      0|        
   39|      0|    }
   40|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/MVVM/MVVM/ViewController.swift:
    1|       |//
    2|       |//  ViewController.swift
    3|       |//  MVVM
    4|       |//
    5|       |//  Created by pjapple on 2020/02/24.
    6|       |//  Copyright © 2020 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |//VIPER = View, Interactor ,Presenter, Entity , Router
   10|       |
   11|       |protocol Router {
   12|       |    
   13|       |    func navigateToDetail(with id: String)
   14|       |}
   15|       |
   16|       |class asdad: Router {
   17|      0|    func navigateToDetail(with id: String) {
   18|      0|        let navController: UINavigationController = UINavigationController()
   19|      0|        
   20|      0|        navController.pushViewController(ViewController(), animated: true)
   21|      0|    }
   22|       |    
   23|      0|    init(navController: UINavigationController) {
   24|      0|        
   25|      0|    }
   26|       |}
   27|       |
   28|       |//MVVM = Model View ViewModel
   29|       |import UIKit
   30|       |
   31|       |class ViewController: UIViewController {
   32|       |
   33|       |    
   34|      0|    lazy var viewModel: ViewModel = {
   35|      0|        return ViewModel(view: self, repo: Model())
   36|      0|    }()
   37|       |    
   38|      0|    @IBAction func clickedLoginButton(_ sender: Any) {
   39|      0|        let _ = viewModel.login(with: "pj", and: "Password")
   40|      0|    }
   41|       |    
   42|      1|    override func viewDidLoad() {
   43|      1|        super.viewDidLoad()
   44|      1|    }
   45|       |}
   46|       |
   47|       |protocol loginProtocol : class {
   48|       |    
   49|       |    func LoginSuccess(_ userInfo: String)
   50|       |    func loginFailure()
   51|       |}
   52|       |
   53|       |extension ViewController : loginProtocol {
   54|      0|    func LoginSuccess(_ userInfo: String) {
   55|      0|        print (userInfo)
   56|      0|    }
   57|       |    
   58|      0|    func loginFailure() {
   59|      0|        print("Fails")
   60|      0|    }
   61|       |}

/Users/aafraneokese/Documents/Learn IoS Features/Tests/Unit Tests/MVVM/MVVM/ViewModel.swift:
    1|       |//
    2|       |//  ViewModel.swift
    3|       |//  MVVM
    4|       |//
    5|       |//  Created by pjapple on 2020/02/24.
    6|       |//  Copyright © 2020 DVT. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |class ViewModel {
   12|       |    
   13|       |    weak var view : loginProtocol?
   14|       |    weak var repo : ModelProtocol?
   15|      2|    init( view:loginProtocol, repo : ModelProtocol) {
   16|      2|        self.view = view
   17|      2|        self.repo = repo
   18|      2|    }
   19|       |    
   20|      2|    func login(with username: String, and password: String) -> Bool{
   21|      2|        
   22|      2|        let user = repo?.login(with: username, and: password)
   23|      2|        
   24|      2|        //UI Thread
   25|      2|        if let user = user {
   26|      1|            view?.LoginSuccess(" My name is \(user.name) \(user.surname)")
   27|      1|            return true
   28|      1|        }else {
   29|      1|            view?.loginFailure()
   30|      1|            return false
   31|      1|        }
   32|      0|    }
   33|       |}

